/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISongSharesMarketPlace {
  export type SaleStruct = {
    active: boolean;
    seller: AddressLike;
    sharesForSale: BigNumberish;
    pricePerShare: BigNumberish;
    maxSharesPerWallet: BigNumberish;
    totalSold: BigNumberish;
    stableCoin: AddressLike;
  };

  export type SaleStructOutput = [
    active: boolean,
    seller: string,
    sharesForSale: bigint,
    pricePerShare: bigint,
    maxSharesPerWallet: bigint,
    totalSold: bigint,
    stableCoin: string
  ] & {
    active: boolean;
    seller: string;
    sharesForSale: bigint;
    pricePerShare: bigint;
    maxSharesPerWallet: bigint;
    totalSold: bigint;
    stableCoin: string;
  };
}

export interface ISongSharesMarketPlaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyShares"
      | "endSale"
      | "getSale"
      | "isApprovedForShares"
      | "isSaleExpired"
      | "pause"
      | "startSale"
      | "unpause"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyShares",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endSale",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForShares",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSaleExpired",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startSale",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaleExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export interface ISongSharesMarketPlace extends BaseContract {
  connect(runner?: ContractRunner | null): ISongSharesMarketPlace;
  waitForDeployment(): Promise<this>;

  interface: ISongSharesMarketPlaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyShares: TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "payable"
  >;

  endSale: TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  getSale: TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [ISongSharesMarketPlace.SaleStructOutput],
    "view"
  >;

  isApprovedForShares: TypedContractMethod<
    [wsTokenManagement: AddressLike, seller: AddressLike],
    [boolean],
    "view"
  >;

  isSaleExpired: TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  startSale: TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      maxShares: BigNumberish,
      _stableCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFunds: TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "endSale"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSale"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [ISongSharesMarketPlace.SaleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForShares"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike, seller: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSaleExpired"
  ): TypedContractMethod<[wsTokenManagement: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSale"
  ): TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      maxShares: BigNumberish,
      _stableCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
