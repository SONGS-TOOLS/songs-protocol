/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IWSTokensManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createFungibleSongShares"
      | "createSongConcept"
      | "getFungibleTokenShares"
      | "getShareholderAddresses"
      | "getSharesIdForSong"
      | "setTokenURI"
      | "uri"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createFungibleSongShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSongConcept",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFungibleTokenShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getShareholderAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesIdForSong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "createFungibleSongShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSongConcept",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFungibleTokenShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShareholderAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesIdForSong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export interface IWSTokensManagement extends BaseContract {
  connect(runner?: ContractRunner | null): IWSTokensManagement;
  waitForDeployment(): Promise<this>;

  interface: IWSTokensManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createFungibleSongShares: TypedContractMethod<
    [songId: BigNumberish, sharesAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createSongConcept: TypedContractMethod<
    [songURI: string, smartWallet: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFungibleTokenShares: TypedContractMethod<
    [sharesId: BigNumberish],
    [bigint],
    "view"
  >;

  getShareholderAddresses: TypedContractMethod<
    [sharesId: BigNumberish],
    [string[]],
    "view"
  >;

  getSharesIdForSong: TypedContractMethod<
    [songId: BigNumberish],
    [bigint],
    "view"
  >;

  setTokenURI: TypedContractMethod<
    [tokenId: BigNumberish, tokenURI: string],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createFungibleSongShares"
  ): TypedContractMethod<
    [songId: BigNumberish, sharesAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createSongConcept"
  ): TypedContractMethod<
    [songURI: string, smartWallet: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getFungibleTokenShares"
  ): TypedContractMethod<[sharesId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getShareholderAddresses"
  ): TypedContractMethod<[sharesId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSharesIdForSong"
  ): TypedContractMethod<[songId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, tokenURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  filters: {};
}
