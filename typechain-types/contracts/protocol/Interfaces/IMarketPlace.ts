/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IMarketPlace {
  export type SaleStruct = {
    tokenId: BigNumberish;
    sharesForSale: BigNumberish;
    pricePerShare: BigNumberish;
    maxSharesPerWallet: BigNumberish;
    stableCoin: AddressLike;
    active: boolean;
  };

  export type SaleStructOutput = [
    tokenId: bigint,
    sharesForSale: bigint,
    pricePerShare: bigint,
    maxSharesPerWallet: bigint,
    stableCoin: string,
    active: boolean
  ] & {
    tokenId: bigint;
    sharesForSale: bigint;
    pricePerShare: bigint;
    maxSharesPerWallet: bigint;
    stableCoin: string;
    active: boolean;
  };
}

export interface IMarketPlaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyShares"
      | "endSharesSale"
      | "isApprovedForShares"
      | "sales"
      | "startSharesSale"
      | "withdrawFunds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyShares",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endSharesSale",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForShares",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sales",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startSharesSale",
    values: [
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endSharesSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startSharesSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export interface IMarketPlace extends BaseContract {
  connect(runner?: ContractRunner | null): IMarketPlace;
  waitForDeployment(): Promise<this>;

  interface: IMarketPlaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyShares: TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      saleId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  endSharesSale: TypedContractMethod<
    [wsTokenManagement: AddressLike, saleId: BigNumberish],
    [void],
    "nonpayable"
  >;

  isApprovedForShares: TypedContractMethod<
    [wsTokenManagement: AddressLike, seller: AddressLike],
    [boolean],
    "view"
  >;

  sales: TypedContractMethod<
    [wsTokenManagement: AddressLike, saleId: BigNumberish],
    [IMarketPlace.SaleStructOutput],
    "view"
  >;

  startSharesSale: TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      maxShares: BigNumberish,
      _stableCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [wsTokenManagement: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      saleId: BigNumberish,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "endSharesSale"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike, saleId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForShares"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike, seller: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "sales"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike, saleId: BigNumberish],
    [IMarketPlace.SaleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "startSharesSale"
  ): TypedContractMethod<
    [
      wsTokenManagement: AddressLike,
      tokenId: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish,
      maxShares: BigNumberish,
      _stableCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike, token: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
