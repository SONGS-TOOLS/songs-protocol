/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDistributorWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptWrappedSongForReview"
      | "confirmWrappedSongRelease"
      | "currentBatchIndex"
      | "managedWrappedSongs"
      | "receiveBatchPaymentETH"
      | "receiveBatchPaymentStablecoin"
      | "receiveERC20"
      | "receivePaymentETH"
      | "receivePaymentStablecoin"
      | "redeemETH"
      | "redeemWrappedSongEarnings"
      | "rejectWrappedSongRelease"
      | "wrappedSongTreasury"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptWrappedSongForReview",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managedWrappedSongs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBatchPaymentETH",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBatchPaymentStablecoin",
    values: [AddressLike[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivePaymentETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePaymentStablecoin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWrappedSongEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongTreasury",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptWrappedSongForReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managedWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBatchPaymentETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBatchPaymentStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePaymentETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePaymentStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWrappedSongEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongTreasury",
    data: BytesLike
  ): Result;
}

export interface IDistributorWallet extends BaseContract {
  connect(runner?: ContractRunner | null): IDistributorWallet;
  waitForDeployment(): Promise<this>;

  interface: IDistributorWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptWrappedSongForReview: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  currentBatchIndex: TypedContractMethod<[], [bigint], "view">;

  managedWrappedSongs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  receiveBatchPaymentETH: TypedContractMethod<
    [_wrappedSongs: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "payable"
  >;

  receiveBatchPaymentStablecoin: TypedContractMethod<
    [
      _wrappedSongs: AddressLike[],
      _amounts: BigNumberish[],
      _totalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  receiveERC20: TypedContractMethod<[], [void], "nonpayable">;

  receivePaymentETH: TypedContractMethod<
    [_wrappedSong: AddressLike],
    [void],
    "payable"
  >;

  receivePaymentStablecoin: TypedContractMethod<
    [_wrappedSong: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemETH: TypedContractMethod<
    [_wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  redeemWrappedSongEarnings: TypedContractMethod<
    [_wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  rejectWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  wrappedSongTreasury: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptWrappedSongForReview"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentBatchIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managedWrappedSongs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "receiveBatchPaymentETH"
  ): TypedContractMethod<
    [_wrappedSongs: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "receiveBatchPaymentStablecoin"
  ): TypedContractMethod<
    [
      _wrappedSongs: AddressLike[],
      _amounts: BigNumberish[],
      _totalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveERC20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receivePaymentETH"
  ): TypedContractMethod<[_wrappedSong: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "receivePaymentStablecoin"
  ): TypedContractMethod<
    [_wrappedSong: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemETH"
  ): TypedContractMethod<[_wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemWrappedSongEarnings"
  ): TypedContractMethod<[_wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rejectWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrappedSongTreasury"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  filters: {};
}
