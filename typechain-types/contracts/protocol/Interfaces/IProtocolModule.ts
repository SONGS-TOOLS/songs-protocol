/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IProtocolModule {
  export type ReviewPeriodStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    distributor: AddressLike;
  };

  export type ReviewPeriodStructOutput = [
    startTime: bigint,
    endTime: bigint,
    distributor: string
  ] & { startTime: bigint; endTime: bigint; distributor: string };
}

export interface IProtocolModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptWrappedSongForReview"
      | "addISCC"
      | "addISRC"
      | "addISWC"
      | "addOwnerWrappedSong"
      | "addUPC"
      | "confirmWrappedSongRelease"
      | "distributorWalletFactory"
      | "erc20whitelist"
      | "getOwnerWrappedSongs"
      | "getPendingDistributorRequests"
      | "getWrappedSongDistributor"
      | "handleExpiredReviewPeriod"
      | "isAuthentic"
      | "isAuthorizedContract"
      | "isReleased"
      | "isTokenWhitelisted"
      | "isValidToCreateWrappedSong"
      | "isccRegistry"
      | "isrcRegistry"
      | "iswcRegistry"
      | "maxSaleDuration"
      | "metadataModule"
      | "paused"
      | "pendingDistributorRequests"
      | "rejectWrappedSongRelease"
      | "releaseFee"
      | "removeTokenFromWhitelist"
      | "removeWrappedSongReleaseRequest"
      | "requestWrappedSongRelease"
      | "reviewPeriodDays"
      | "reviewPeriods"
      | "setAuthorizedContract"
      | "setERC20Whitelist"
      | "setMaxSaleDuration"
      | "setMetadataModule"
      | "setPaused"
      | "setReleaseFee"
      | "setReviewPeriodDays"
      | "setSmartAccountToWSToken"
      | "setWhitelistingManager"
      | "setWrappedSongAuthenticity"
      | "setWrappedSongCreationFee"
      | "setWrappedSongFactory"
      | "upcRegistry"
      | "updateDistributorWalletFactory"
      | "whitelistToken"
      | "whitelistingManager"
      | "wrappedSongAuthenticity"
      | "wrappedSongCreationFee"
      | "wrappedSongFactoryAddress"
      | "wrappedSongToDistributor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptWrappedSongForReview",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addISCC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addISRC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addISWC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOwnerWrappedSong",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addUPC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributorWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20whitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerWrappedSongs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingDistributorRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedSongDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleExpiredReviewPeriod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthentic",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReleased",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidToCreateWrappedSong",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isccRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isrcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "iswcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxSaleDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDistributorRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWrappedSongReleaseRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongRelease",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewPeriodDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewPeriods",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20Whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxSaleDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setReleaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReviewPeriodDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSmartAccountToWSToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongAuthenticity",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistributorWalletFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongAuthenticity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongToDistributor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptWrappedSongForReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addISCC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addISRC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addISWC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerWrappedSong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingDistributorRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedSongDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleExpiredReviewPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthentic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReleased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidToCreateWrappedSong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isccRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isrcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iswcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDistributorRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWrappedSongReleaseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewPeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20Whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxSaleDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReleaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReviewPeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSmartAccountToWSToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongAuthenticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributorWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongAuthenticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongToDistributor",
    data: BytesLike
  ): Result;
}

export interface IProtocolModule extends BaseContract {
  connect(runner?: ContractRunner | null): IProtocolModule;
  waitForDeployment(): Promise<this>;

  interface: IProtocolModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptWrappedSongForReview: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  addISCC: TypedContractMethod<
    [wrappedSong: AddressLike, iscc: string],
    [void],
    "nonpayable"
  >;

  addISRC: TypedContractMethod<
    [wrappedSong: AddressLike, isrc: string],
    [void],
    "nonpayable"
  >;

  addISWC: TypedContractMethod<
    [wrappedSong: AddressLike, iswc: string],
    [void],
    "nonpayable"
  >;

  addOwnerWrappedSong: TypedContractMethod<
    [owner: AddressLike, wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  addUPC: TypedContractMethod<
    [wrappedSong: AddressLike, upc: string],
    [void],
    "nonpayable"
  >;

  confirmWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  distributorWalletFactory: TypedContractMethod<[], [string], "view">;

  erc20whitelist: TypedContractMethod<[], [string], "view">;

  getOwnerWrappedSongs: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  getPendingDistributorRequests: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  getWrappedSongDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  handleExpiredReviewPeriod: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  isAuthentic: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedContract: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  isReleased: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  isTokenWhitelisted: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  isValidToCreateWrappedSong: TypedContractMethod<
    [creator: AddressLike],
    [boolean],
    "view"
  >;

  isccRegistry: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  isrcRegistry: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  iswcRegistry: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  maxSaleDuration: TypedContractMethod<[], [bigint], "view">;

  metadataModule: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingDistributorRequests: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  rejectWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  releaseFee: TypedContractMethod<[], [bigint], "view">;

  removeTokenFromWhitelist: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWrappedSongReleaseRequest: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  requestWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike, distributor: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewPeriodDays: TypedContractMethod<[], [bigint], "view">;

  reviewPeriods: TypedContractMethod<
    [wrappedSong: AddressLike],
    [IProtocolModule.ReviewPeriodStructOutput],
    "view"
  >;

  setAuthorizedContract: TypedContractMethod<
    [contractAddress: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  setERC20Whitelist: TypedContractMethod<
    [_erc20whitelist: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxSaleDuration: TypedContractMethod<
    [_duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMetadataModule: TypedContractMethod<
    [_metadataModule: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setReleaseFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReviewPeriodDays: TypedContractMethod<
    [_days: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSmartAccountToWSToken: TypedContractMethod<
    [smartAccount: AddressLike, wsToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelistingManager: TypedContractMethod<
    [_whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setWrappedSongAuthenticity: TypedContractMethod<
    [wrappedSong: AddressLike, _isAuthentic: boolean],
    [void],
    "nonpayable"
  >;

  setWrappedSongCreationFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWrappedSongFactory: TypedContractMethod<
    [_wrappedSongFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  upcRegistry: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  updateDistributorWalletFactory: TypedContractMethod<
    [_newFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistingManager: TypedContractMethod<[], [string], "view">;

  wrappedSongAuthenticity: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  wrappedSongCreationFee: TypedContractMethod<[], [bigint], "view">;

  wrappedSongFactoryAddress: TypedContractMethod<[], [string], "view">;

  wrappedSongToDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptWrappedSongForReview"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addISCC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, iscc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addISRC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, isrc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addISWC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, iswc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOwnerWrappedSong"
  ): TypedContractMethod<
    [owner: AddressLike, wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUPC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, upc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributorWalletFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20whitelist"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwnerWrappedSongs"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPendingDistributorRequests"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWrappedSongDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "handleExpiredReviewPeriod"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthentic"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedContract"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReleased"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenWhitelisted"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidToCreateWrappedSong"
  ): TypedContractMethod<[creator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isccRegistry"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isrcRegistry"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "iswcRegistry"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "maxSaleDuration"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "metadataModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingDistributorRequests"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "rejectWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeTokenFromWhitelist"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWrappedSongReleaseRequest"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWrappedSongRelease"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, distributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewPeriodDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reviewPeriods"
  ): TypedContractMethod<
    [wrappedSong: AddressLike],
    [IProtocolModule.ReviewPeriodStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedContract"
  ): TypedContractMethod<
    [contractAddress: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setERC20Whitelist"
  ): TypedContractMethod<[_erc20whitelist: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxSaleDuration"
  ): TypedContractMethod<[_duration: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadataModule"
  ): TypedContractMethod<[_metadataModule: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReleaseFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReviewPeriodDays"
  ): TypedContractMethod<[_days: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSmartAccountToWSToken"
  ): TypedContractMethod<
    [smartAccount: AddressLike, wsToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistingManager"
  ): TypedContractMethod<
    [_whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedSongAuthenticity"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, _isAuthentic: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedSongCreationFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWrappedSongFactory"
  ): TypedContractMethod<
    [_wrappedSongFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upcRegistry"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateDistributorWalletFactory"
  ): TypedContractMethod<[_newFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongAuthenticity"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "wrappedSongCreationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wrappedSongFactoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongToDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;

  filters: {};
}
