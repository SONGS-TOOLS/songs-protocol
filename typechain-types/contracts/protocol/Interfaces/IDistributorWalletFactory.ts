/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IDistributorWalletFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkIsDistributorWallet"
      | "createDistributorWallet"
      | "getDistributorWallets"
      | "getWrappedSongDistributor"
      | "wrappedSongToDistributor"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkIsDistributorWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDistributorWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributorWallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedSongDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongToDistributor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIsDistributorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDistributorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributorWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedSongDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongToDistributor",
    data: BytesLike
  ): Result;
}

export interface IDistributorWalletFactory extends BaseContract {
  connect(runner?: ContractRunner | null): IDistributorWalletFactory;
  waitForDeployment(): Promise<this>;

  interface: IDistributorWalletFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIsDistributorWallet: TypedContractMethod<
    [wallet: AddressLike],
    [boolean],
    "view"
  >;

  createDistributorWallet: TypedContractMethod<
    [distributor: AddressLike],
    [string],
    "nonpayable"
  >;

  getDistributorWallets: TypedContractMethod<
    [distributor: AddressLike],
    [string[]],
    "view"
  >;

  getWrappedSongDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  wrappedSongToDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIsDistributorWallet"
  ): TypedContractMethod<[wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createDistributorWallet"
  ): TypedContractMethod<[distributor: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "getDistributorWallets"
  ): TypedContractMethod<[distributor: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWrappedSongDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongToDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;

  filters: {};
}
