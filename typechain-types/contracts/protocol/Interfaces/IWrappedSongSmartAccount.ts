/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IMetadataModule {
  export type MetadataStruct = {
    name: string;
    description: string;
    image: string;
    externalUrl: string;
    animationUrl: string;
    attributesIpfsHash: string;
  };

  export type MetadataStructOutput = [
    name: string,
    description: string,
    image: string,
    externalUrl: string,
    animationUrl: string,
    attributesIpfsHash: string
  ] & {
    name: string;
    description: string;
    image: string;
    externalUrl: string;
    animationUrl: string;
    attributesIpfsHash: string;
  };
}

export interface IWrappedSongSmartAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimEarnings"
      | "claimEthEarnings"
      | "createSongTokens"
      | "getWSTokenManagementAddress"
      | "owner"
      | "receiveERC20"
      | "receiveEarnings"
      | "redeemShares"
      | "requestWrappedSongRelease"
      | "requestWrappedSongReleaseWithMetadata"
      | "updateEarnings"
      | "withdrawSaleFundsFromWSTokenManagement"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimEthEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createSongTokens",
    values: [IMetadataModule.MetadataStruct, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWSTokenManagementAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receiveERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongReleaseWithMetadata",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSaleFundsFromWSTokenManagement",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "claimEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimEthEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSongTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWSTokenManagementAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receiveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongReleaseWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSaleFundsFromWSTokenManagement",
    data: BytesLike
  ): Result;
}

export interface IWrappedSongSmartAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IWrappedSongSmartAccount;
  waitForDeployment(): Promise<this>;

  interface: IWrappedSongSmartAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimEarnings: TypedContractMethod<[], [void], "nonpayable">;

  claimEthEarnings: TypedContractMethod<[], [void], "nonpayable">;

  createSongTokens: TypedContractMethod<
    [
      songMetadata: IMetadataModule.MetadataStruct,
      sharesAmount: BigNumberish,
      creator: AddressLike
    ],
    [[bigint, bigint] & { songId: bigint; sharesId: bigint }],
    "nonpayable"
  >;

  getWSTokenManagementAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  receiveERC20: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  receiveEarnings: TypedContractMethod<[], [void], "payable">;

  redeemShares: TypedContractMethod<[], [void], "nonpayable">;

  requestWrappedSongRelease: TypedContractMethod<
    [_distributorWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  requestWrappedSongReleaseWithMetadata: TypedContractMethod<
    [_distributorWallet: AddressLike, songURI: string],
    [void],
    "nonpayable"
  >;

  updateEarnings: TypedContractMethod<[], [void], "nonpayable">;

  withdrawSaleFundsFromWSTokenManagement: TypedContractMethod<
    [],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimEthEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSongTokens"
  ): TypedContractMethod<
    [
      songMetadata: IMetadataModule.MetadataStruct,
      sharesAmount: BigNumberish,
      creator: AddressLike
    ],
    [[bigint, bigint] & { songId: bigint; sharesId: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getWSTokenManagementAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveERC20"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveEarnings"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "redeemShares"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWrappedSongRelease"
  ): TypedContractMethod<
    [_distributorWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestWrappedSongReleaseWithMetadata"
  ): TypedContractMethod<
    [_distributorWallet: AddressLike, songURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawSaleFundsFromWSTokenManagement"
  ): TypedContractMethod<[], [void], "nonpayable">;

  filters: {};
}
