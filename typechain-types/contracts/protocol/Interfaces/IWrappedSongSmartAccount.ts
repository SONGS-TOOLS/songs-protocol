/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IWrappedSongSmartAccountInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchTransferShares"
      | "canReceiveERC20"
      | "checkAuthenticity"
      | "createFungibleSongShares"
      | "createsSongToken"
      | "createsWrappedSongTokens"
      | "executeConfirmedMetadataUpdate"
      | "getTokenBalance"
      | "getTokenMetadata"
      | "getTotalSupplyOfShares"
      | "getWSTokenManagementAddress"
      | "getWrappedSongMetadata"
      | "receiveERC20"
      | "receiveEarnings"
      | "requestUpdateMetadata"
      | "requestWrappedSongRelease"
      | "requestWrappedSongReleaseWithMetadata"
      | "setSharesForSale"
      | "transferSongShares"
      | "updateMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "batchTransferShares",
    values: [BigNumberish, BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canReceiveERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAuthenticity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createFungibleSongShares",
    values: [BigNumberish, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createsSongToken",
    values: [string, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createsWrappedSongTokens",
    values: [string, BigNumberish, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeConfirmedMetadataUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalSupplyOfShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWSTokenManagementAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedSongMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveERC20",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "requestUpdateMetadata",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongReleaseWithMetadata",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSharesForSale",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferSongShares",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "batchTransferShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canReceiveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAuthenticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFungibleSongShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createsSongToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createsWrappedSongTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeConfirmedMetadataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSupplyOfShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWSTokenManagementAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedSongMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUpdateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongReleaseWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSharesForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferSongShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
}

export interface IWrappedSongSmartAccount extends BaseContract {
  connect(runner?: ContractRunner | null): IWrappedSongSmartAccount;
  waitForDeployment(): Promise<this>;

  interface: IWrappedSongSmartAccountInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchTransferShares: TypedContractMethod<
    [
      sharesId: BigNumberish,
      amounts: BigNumberish[],
      recipients: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;

  canReceiveERC20: TypedContractMethod<[], [boolean], "view">;

  checkAuthenticity: TypedContractMethod<[], [boolean], "view">;

  createFungibleSongShares: TypedContractMethod<
    [
      songId: BigNumberish,
      sharesAmount: BigNumberish,
      sharesURI: string,
      creator: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;

  createsSongToken: TypedContractMethod<
    [songURI: string, participants: AddressLike[]],
    [bigint],
    "nonpayable"
  >;

  createsWrappedSongTokens: TypedContractMethod<
    [
      songURI: string,
      sharesAmount: BigNumberish,
      sharesURI: string,
      creator: AddressLike
    ],
    [[bigint, bigint] & { songId: bigint; newSongSharesId: bigint }],
    "nonpayable"
  >;

  executeConfirmedMetadataUpdate: TypedContractMethod<
    [tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTokenBalance: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  getTokenMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  getTotalSupplyOfShares: TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "view"
  >;

  getWSTokenManagementAddress: TypedContractMethod<[], [string], "view">;

  getWrappedSongMetadata: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  receiveERC20: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  receiveEarnings: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  requestUpdateMetadata: TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: string],
    [void],
    "nonpayable"
  >;

  requestWrappedSongRelease: TypedContractMethod<
    [_distributorWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  requestWrappedSongReleaseWithMetadata: TypedContractMethod<
    [_distributorWallet: AddressLike, songURI: string],
    [void],
    "nonpayable"
  >;

  setSharesForSale: TypedContractMethod<
    [
      sharesId: BigNumberish,
      percentage: BigNumberish,
      pricePerShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferSongShares: TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMetadata: TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchTransferShares"
  ): TypedContractMethod<
    [
      sharesId: BigNumberish,
      amounts: BigNumberish[],
      recipients: AddressLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canReceiveERC20"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "checkAuthenticity"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "createFungibleSongShares"
  ): TypedContractMethod<
    [
      songId: BigNumberish,
      sharesAmount: BigNumberish,
      sharesURI: string,
      creator: AddressLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createsSongToken"
  ): TypedContractMethod<
    [songURI: string, participants: AddressLike[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createsWrappedSongTokens"
  ): TypedContractMethod<
    [
      songURI: string,
      sharesAmount: BigNumberish,
      sharesURI: string,
      creator: AddressLike
    ],
    [[bigint, bigint] & { songId: bigint; newSongSharesId: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeConfirmedMetadataUpdate"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTokenBalance"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenMetadata"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalSupplyOfShares"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWSTokenManagementAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWrappedSongMetadata"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "receiveERC20"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveEarnings"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUpdateMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestWrappedSongRelease"
  ): TypedContractMethod<
    [_distributorWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "requestWrappedSongReleaseWithMetadata"
  ): TypedContractMethod<
    [_distributorWallet: AddressLike, songURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSharesForSale"
  ): TypedContractMethod<
    [
      sharesId: BigNumberish,
      percentage: BigNumberish,
      pricePerShare: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferSongShares"
  ): TypedContractMethod<
    [tokenId: BigNumberish, amount: BigNumberish, to: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newMetadata: string],
    [void],
    "nonpayable"
  >;

  filters: {};
}
