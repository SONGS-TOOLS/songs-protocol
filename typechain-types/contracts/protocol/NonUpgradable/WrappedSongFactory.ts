/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IMetadataModule {
  export type MetadataStruct = {
    name: string;
    description: string;
    image: string;
    externalUrl: string;
    animationUrl: string;
    attributesIpfsHash: string;
  };

  export type MetadataStructOutput = [
    name: string,
    description: string,
    image: string,
    externalUrl: string,
    animationUrl: string,
    attributesIpfsHash: string
  ] & {
    name: string;
    description: string;
    image: string;
    externalUrl: string;
    animationUrl: string;
    attributesIpfsHash: string;
  };
}

export interface WrappedSongFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createWrappedSongWithMetadata"
      | "getOwnerWrappedSongs"
      | "metadataModule"
      | "ownerWrappedSongs"
      | "protocolModule"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "WrappedSongCreated"
      | "WrappedSongCreatedWithMetadata"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createWrappedSongWithMetadata",
    values: [AddressLike, IMetadataModule.MetadataStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerWrappedSongs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWrappedSongs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolModule",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "createWrappedSongWithMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolModule",
    data: BytesLike
  ): Result;
}

export namespace WrappedSongCreatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    wrappedSongSmartAccount: AddressLike,
    stablecoin: AddressLike,
    wsTokenManagement: AddressLike
  ];
  export type OutputTuple = [
    owner: string,
    wrappedSongSmartAccount: string,
    stablecoin: string,
    wsTokenManagement: string
  ];
  export interface OutputObject {
    owner: string;
    wrappedSongSmartAccount: string;
    stablecoin: string;
    wsTokenManagement: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongCreatedWithMetadataEvent {
  export type InputTuple = [
    owner: AddressLike,
    wrappedSongSmartAccount: AddressLike,
    songMetadata: IMetadataModule.MetadataStruct,
    sharesAmount: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    wrappedSongSmartAccount: string,
    songMetadata: IMetadataModule.MetadataStructOutput,
    sharesAmount: bigint
  ];
  export interface OutputObject {
    owner: string;
    wrappedSongSmartAccount: string;
    songMetadata: IMetadataModule.MetadataStructOutput;
    sharesAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WrappedSongFactory extends BaseContract {
  connect(runner?: ContractRunner | null): WrappedSongFactory;
  waitForDeployment(): Promise<this>;

  interface: WrappedSongFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createWrappedSongWithMetadata: TypedContractMethod<
    [
      _stablecoin: AddressLike,
      songMetadata: IMetadataModule.MetadataStruct,
      sharesAmount: BigNumberish
    ],
    [string],
    "payable"
  >;

  getOwnerWrappedSongs: TypedContractMethod<
    [_owner: AddressLike],
    [string[]],
    "view"
  >;

  metadataModule: TypedContractMethod<[], [string], "view">;

  ownerWrappedSongs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  protocolModule: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createWrappedSongWithMetadata"
  ): TypedContractMethod<
    [
      _stablecoin: AddressLike,
      songMetadata: IMetadataModule.MetadataStruct,
      sharesAmount: BigNumberish
    ],
    [string],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getOwnerWrappedSongs"
  ): TypedContractMethod<[_owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "metadataModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerWrappedSongs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolModule"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "WrappedSongCreated"
  ): TypedContractEvent<
    WrappedSongCreatedEvent.InputTuple,
    WrappedSongCreatedEvent.OutputTuple,
    WrappedSongCreatedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongCreatedWithMetadata"
  ): TypedContractEvent<
    WrappedSongCreatedWithMetadataEvent.InputTuple,
    WrappedSongCreatedWithMetadataEvent.OutputTuple,
    WrappedSongCreatedWithMetadataEvent.OutputObject
  >;

  filters: {
    "WrappedSongCreated(address,address,address,address)": TypedContractEvent<
      WrappedSongCreatedEvent.InputTuple,
      WrappedSongCreatedEvent.OutputTuple,
      WrappedSongCreatedEvent.OutputObject
    >;
    WrappedSongCreated: TypedContractEvent<
      WrappedSongCreatedEvent.InputTuple,
      WrappedSongCreatedEvent.OutputTuple,
      WrappedSongCreatedEvent.OutputObject
    >;

    "WrappedSongCreatedWithMetadata(address,address,tuple,uint256)": TypedContractEvent<
      WrappedSongCreatedWithMetadataEvent.InputTuple,
      WrappedSongCreatedWithMetadataEvent.OutputTuple,
      WrappedSongCreatedWithMetadataEvent.OutputObject
    >;
    WrappedSongCreatedWithMetadata: TypedContractEvent<
      WrappedSongCreatedWithMetadataEvent.InputTuple,
      WrappedSongCreatedWithMetadataEvent.OutputTuple,
      WrappedSongCreatedWithMetadataEvent.OutputObject
    >;
  };
}
