/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DistributorWalletFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "checkIsDistributorWallet"
      | "createDistributorWallet"
      | "distributorWallets"
      | "getDistributorWallets"
      | "getWrappedSongDistributor"
      | "isDistributorWallet"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "wrappedSongToDistributor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DistributorWalletCreated"
      | "OwnershipTransferred"
      | "WrappedSongReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "checkIsDistributorWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createDistributorWallet",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributorWallets",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributorWallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedSongDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDistributorWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongToDistributor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkIsDistributorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDistributorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributorWallets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedSongDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDistributorWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongToDistributor",
    data: BytesLike
  ): Result;
}

export namespace DistributorWalletCreatedEvent {
  export type InputTuple = [distributor: AddressLike, wallet: AddressLike];
  export type OutputTuple = [distributor: string, wallet: string];
  export interface OutputObject {
    distributor: string;
    wallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleasedEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DistributorWalletFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DistributorWalletFactory;
  waitForDeployment(): Promise<this>;

  interface: DistributorWalletFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  checkIsDistributorWallet: TypedContractMethod<
    [wallet: AddressLike],
    [boolean],
    "view"
  >;

  createDistributorWallet: TypedContractMethod<
    [
      _stablecoin: AddressLike,
      _protocolModule: AddressLike,
      _owner: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  distributorWallets: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getDistributorWallets: TypedContractMethod<
    [ownerOfWallets: AddressLike],
    [string[]],
    "view"
  >;

  getWrappedSongDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  isDistributorWallet: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wrappedSongToDistributor: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "checkIsDistributorWallet"
  ): TypedContractMethod<[wallet: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createDistributorWallet"
  ): TypedContractMethod<
    [
      _stablecoin: AddressLike,
      _protocolModule: AddressLike,
      _owner: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributorWallets"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDistributorWallets"
  ): TypedContractMethod<[ownerOfWallets: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getWrappedSongDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isDistributorWallet"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrappedSongToDistributor"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "DistributorWalletCreated"
  ): TypedContractEvent<
    DistributorWalletCreatedEvent.InputTuple,
    DistributorWalletCreatedEvent.OutputTuple,
    DistributorWalletCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleased"
  ): TypedContractEvent<
    WrappedSongReleasedEvent.InputTuple,
    WrappedSongReleasedEvent.OutputTuple,
    WrappedSongReleasedEvent.OutputObject
  >;

  filters: {
    "DistributorWalletCreated(address,address)": TypedContractEvent<
      DistributorWalletCreatedEvent.InputTuple,
      DistributorWalletCreatedEvent.OutputTuple,
      DistributorWalletCreatedEvent.OutputObject
    >;
    DistributorWalletCreated: TypedContractEvent<
      DistributorWalletCreatedEvent.InputTuple,
      DistributorWalletCreatedEvent.OutputTuple,
      DistributorWalletCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WrappedSongReleased(address,address)": TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
    WrappedSongReleased: TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
  };
}
