/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ProtocolModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptWrappedSongForReview"
      | "addISCC"
      | "addISRC"
      | "addISWC"
      | "addOwnerWrappedSong"
      | "addUPC"
      | "authorizedContracts"
      | "confirmWrappedSongRelease"
      | "distributorWalletFactory"
      | "erc20whitelist"
      | "getOwnerWrappedSongs"
      | "getPendingDistributorRequests"
      | "getWrappedSongDistributor"
      | "handleExpiredReviewPeriod"
      | "isAuthentic"
      | "isAuthorizedContract"
      | "isReleased"
      | "isTokenWhitelisted"
      | "isValidToCreateWrappedSong"
      | "isccRegistry"
      | "isrcRegistry"
      | "iswcRegistry"
      | "metadataModule"
      | "owner"
      | "ownerWrappedSongs"
      | "paused"
      | "pendingDistributorRequests"
      | "rejectWrappedSongRelease"
      | "releaseFee"
      | "removeTokenFromWhitelist"
      | "removeWrappedSongReleaseRequest"
      | "renounceOwnership"
      | "requestWrappedSongRelease"
      | "reviewPeriodDays"
      | "reviewPeriods"
      | "setAuthorizedContract"
      | "setERC20Whitelist"
      | "setMetadataModule"
      | "setPaused"
      | "setReleaseFee"
      | "setReviewPeriodDays"
      | "setSmartAccountToWSToken"
      | "setWhitelistingManager"
      | "setWrappedSongAuthenticity"
      | "setWrappedSongCreationFee"
      | "setWrappedSongFactory"
      | "smartAccountToWSToken"
      | "transferOwnership"
      | "upcRegistry"
      | "updateDistributorWalletFactory"
      | "whitelistToken"
      | "whitelistingManager"
      | "wrappedSongAuthenticity"
      | "wrappedSongCreationFee"
      | "wrappedSongFactory"
      | "wrappedSongFactoryAddress"
      | "wrappedSongToDistributor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DistributorAcceptedReview"
      | "MetadataUpdateRequested"
      | "MetadataUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "ReviewPeriodExpired"
      | "WrappedSongAuthenticitySet"
      | "WrappedSongReleaseRejected"
      | "WrappedSongReleaseRequested"
      | "WrappedSongReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptWrappedSongForReview",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addISCC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addISRC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addISWC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addOwnerWrappedSong",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addUPC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedContracts",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributorWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20whitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerWrappedSongs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingDistributorRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedSongDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "handleExpiredReviewPeriod",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthentic",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorizedContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReleased",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidToCreateWrappedSong",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isccRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isrcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "iswcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataModule",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerWrappedSongs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDistributorRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWrappedSongReleaseRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongRelease",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reviewPeriodDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reviewPeriods",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedContract",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setERC20Whitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setPaused", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setReleaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReviewPeriodDays",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSmartAccountToWSToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongAuthenticity",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "smartAccountToWSToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistributorWalletFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongAuthenticity",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongFactoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongToDistributor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptWrappedSongForReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addISCC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addISRC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addISWC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerWrappedSong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addUPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnerWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingDistributorRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedSongDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleExpiredReviewPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthentic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReleased", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTokenWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidToCreateWrappedSong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isccRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isrcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iswcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDistributorRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWrappedSongReleaseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewPeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reviewPeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setERC20Whitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReleaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReviewPeriodDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSmartAccountToWSToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongAuthenticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "smartAccountToWSToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributorWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongAuthenticity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongToDistributor",
    data: BytesLike
  ): Result;
}

export namespace DistributorAcceptedReviewEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateRequestedEvent {
  export type InputTuple = [
    wrappedSong: AddressLike,
    tokenId: BigNumberish,
    newMetadata: string
  ];
  export type OutputTuple = [
    wrappedSong: string,
    tokenId: bigint,
    newMetadata: string
  ];
  export interface OutputObject {
    wrappedSong: string;
    tokenId: bigint;
    newMetadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    wrappedSong: AddressLike,
    tokenId: BigNumberish,
    newMetadata: string
  ];
  export type OutputTuple = [
    wrappedSong: string,
    tokenId: bigint,
    newMetadata: string
  ];
  export interface OutputObject {
    wrappedSong: string;
    tokenId: bigint;
    newMetadata: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReviewPeriodExpiredEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongAuthenticitySetEvent {
  export type InputTuple = [wrappedSong: AddressLike, isAuthentic: boolean];
  export type OutputTuple = [wrappedSong: string, isAuthentic: boolean];
  export interface OutputObject {
    wrappedSong: string;
    isAuthentic: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleaseRejectedEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleaseRequestedEvent {
  export type InputTuple = [
    wrappedSong: AddressLike,
    distributor: AddressLike,
    creator: AddressLike
  ];
  export type OutputTuple = [
    wrappedSong: string,
    distributor: string,
    creator: string
  ];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleasedEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProtocolModule extends BaseContract {
  connect(runner?: ContractRunner | null): ProtocolModule;
  waitForDeployment(): Promise<this>;

  interface: ProtocolModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptWrappedSongForReview: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  addISCC: TypedContractMethod<
    [wrappedSong: AddressLike, iscc: string],
    [void],
    "nonpayable"
  >;

  addISRC: TypedContractMethod<
    [wrappedSong: AddressLike, isrc: string],
    [void],
    "nonpayable"
  >;

  addISWC: TypedContractMethod<
    [wrappedSong: AddressLike, iswc: string],
    [void],
    "nonpayable"
  >;

  addOwnerWrappedSong: TypedContractMethod<
    [owner: AddressLike, wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  addUPC: TypedContractMethod<
    [wrappedSong: AddressLike, upc: string],
    [void],
    "nonpayable"
  >;

  authorizedContracts: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  confirmWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  distributorWalletFactory: TypedContractMethod<[], [string], "view">;

  erc20whitelist: TypedContractMethod<[], [string], "view">;

  getOwnerWrappedSongs: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  getPendingDistributorRequests: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  getWrappedSongDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  handleExpiredReviewPeriod: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  isAuthentic: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  isAuthorizedContract: TypedContractMethod<
    [_contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  isReleased: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  isTokenWhitelisted: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  isValidToCreateWrappedSong: TypedContractMethod<
    [creator: AddressLike],
    [boolean],
    "view"
  >;

  isccRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  isrcRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  iswcRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  metadataModule: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerWrappedSongs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingDistributorRequests: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  rejectWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  releaseFee: TypedContractMethod<[], [bigint], "view">;

  removeTokenFromWhitelist: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWrappedSongReleaseRequest: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike, distributor: AddressLike],
    [void],
    "nonpayable"
  >;

  reviewPeriodDays: TypedContractMethod<[], [bigint], "view">;

  reviewPeriods: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        startTime: bigint;
        endTime: bigint;
        distributor: string;
      }
    ],
    "view"
  >;

  setAuthorizedContract: TypedContractMethod<
    [_contractAddress: AddressLike, _isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  setERC20Whitelist: TypedContractMethod<
    [_erc20whitelist: AddressLike],
    [void],
    "nonpayable"
  >;

  setMetadataModule: TypedContractMethod<
    [_metadataModule: AddressLike],
    [void],
    "nonpayable"
  >;

  setPaused: TypedContractMethod<[_paused: boolean], [void], "nonpayable">;

  setReleaseFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setReviewPeriodDays: TypedContractMethod<
    [_days: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSmartAccountToWSToken: TypedContractMethod<
    [smartAccount: AddressLike, wsToken: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelistingManager: TypedContractMethod<
    [_whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setWrappedSongAuthenticity: TypedContractMethod<
    [wrappedSong: AddressLike, _isAuthentic: boolean],
    [void],
    "nonpayable"
  >;

  setWrappedSongCreationFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWrappedSongFactory: TypedContractMethod<
    [_wrappedSongFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  smartAccountToWSToken: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upcRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  updateDistributorWalletFactory: TypedContractMethod<
    [_newFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistingManager: TypedContractMethod<[], [string], "view">;

  wrappedSongAuthenticity: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  wrappedSongCreationFee: TypedContractMethod<[], [bigint], "view">;

  wrappedSongFactory: TypedContractMethod<[], [string], "view">;

  wrappedSongFactoryAddress: TypedContractMethod<[], [string], "view">;

  wrappedSongToDistributor: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptWrappedSongForReview"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addISCC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, iscc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addISRC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, isrc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addISWC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, iswc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addOwnerWrappedSong"
  ): TypedContractMethod<
    [owner: AddressLike, wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUPC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, upc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "authorizedContracts"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "confirmWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributorWalletFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20whitelist"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getOwnerWrappedSongs"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPendingDistributorRequests"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWrappedSongDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "handleExpiredReviewPeriod"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAuthentic"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isAuthorizedContract"
  ): TypedContractMethod<[_contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReleased"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTokenWhitelisted"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isValidToCreateWrappedSong"
  ): TypedContractMethod<[creator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isccRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isrcRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "iswcRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "metadataModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerWrappedSongs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingDistributorRequests"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "rejectWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeTokenFromWhitelist"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWrappedSongReleaseRequest"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWrappedSongRelease"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, distributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reviewPeriodDays"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reviewPeriods"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, string] & {
        startTime: bigint;
        endTime: bigint;
        distributor: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAuthorizedContract"
  ): TypedContractMethod<
    [_contractAddress: AddressLike, _isAuthorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setERC20Whitelist"
  ): TypedContractMethod<[_erc20whitelist: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMetadataModule"
  ): TypedContractMethod<[_metadataModule: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPaused"
  ): TypedContractMethod<[_paused: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReleaseFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReviewPeriodDays"
  ): TypedContractMethod<[_days: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSmartAccountToWSToken"
  ): TypedContractMethod<
    [smartAccount: AddressLike, wsToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelistingManager"
  ): TypedContractMethod<
    [_whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedSongAuthenticity"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, _isAuthentic: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedSongCreationFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWrappedSongFactory"
  ): TypedContractMethod<
    [_wrappedSongFactory: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "smartAccountToWSToken"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upcRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateDistributorWalletFactory"
  ): TypedContractMethod<[_newFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongAuthenticity"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "wrappedSongCreationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wrappedSongFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongFactoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongToDistributor"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "DistributorAcceptedReview"
  ): TypedContractEvent<
    DistributorAcceptedReviewEvent.InputTuple,
    DistributorAcceptedReviewEvent.OutputTuple,
    DistributorAcceptedReviewEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdateRequested"
  ): TypedContractEvent<
    MetadataUpdateRequestedEvent.InputTuple,
    MetadataUpdateRequestedEvent.OutputTuple,
    MetadataUpdateRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReviewPeriodExpired"
  ): TypedContractEvent<
    ReviewPeriodExpiredEvent.InputTuple,
    ReviewPeriodExpiredEvent.OutputTuple,
    ReviewPeriodExpiredEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongAuthenticitySet"
  ): TypedContractEvent<
    WrappedSongAuthenticitySetEvent.InputTuple,
    WrappedSongAuthenticitySetEvent.OutputTuple,
    WrappedSongAuthenticitySetEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleaseRejected"
  ): TypedContractEvent<
    WrappedSongReleaseRejectedEvent.InputTuple,
    WrappedSongReleaseRejectedEvent.OutputTuple,
    WrappedSongReleaseRejectedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleaseRequested"
  ): TypedContractEvent<
    WrappedSongReleaseRequestedEvent.InputTuple,
    WrappedSongReleaseRequestedEvent.OutputTuple,
    WrappedSongReleaseRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleased"
  ): TypedContractEvent<
    WrappedSongReleasedEvent.InputTuple,
    WrappedSongReleasedEvent.OutputTuple,
    WrappedSongReleasedEvent.OutputObject
  >;

  filters: {
    "DistributorAcceptedReview(address,address)": TypedContractEvent<
      DistributorAcceptedReviewEvent.InputTuple,
      DistributorAcceptedReviewEvent.OutputTuple,
      DistributorAcceptedReviewEvent.OutputObject
    >;
    DistributorAcceptedReview: TypedContractEvent<
      DistributorAcceptedReviewEvent.InputTuple,
      DistributorAcceptedReviewEvent.OutputTuple,
      DistributorAcceptedReviewEvent.OutputObject
    >;

    "MetadataUpdateRequested(address,uint256,string)": TypedContractEvent<
      MetadataUpdateRequestedEvent.InputTuple,
      MetadataUpdateRequestedEvent.OutputTuple,
      MetadataUpdateRequestedEvent.OutputObject
    >;
    MetadataUpdateRequested: TypedContractEvent<
      MetadataUpdateRequestedEvent.InputTuple,
      MetadataUpdateRequestedEvent.OutputTuple,
      MetadataUpdateRequestedEvent.OutputObject
    >;

    "MetadataUpdated(address,uint256,string)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(bool)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReviewPeriodExpired(address,address)": TypedContractEvent<
      ReviewPeriodExpiredEvent.InputTuple,
      ReviewPeriodExpiredEvent.OutputTuple,
      ReviewPeriodExpiredEvent.OutputObject
    >;
    ReviewPeriodExpired: TypedContractEvent<
      ReviewPeriodExpiredEvent.InputTuple,
      ReviewPeriodExpiredEvent.OutputTuple,
      ReviewPeriodExpiredEvent.OutputObject
    >;

    "WrappedSongAuthenticitySet(address,bool)": TypedContractEvent<
      WrappedSongAuthenticitySetEvent.InputTuple,
      WrappedSongAuthenticitySetEvent.OutputTuple,
      WrappedSongAuthenticitySetEvent.OutputObject
    >;
    WrappedSongAuthenticitySet: TypedContractEvent<
      WrappedSongAuthenticitySetEvent.InputTuple,
      WrappedSongAuthenticitySetEvent.OutputTuple,
      WrappedSongAuthenticitySetEvent.OutputObject
    >;

    "WrappedSongReleaseRejected(address,address)": TypedContractEvent<
      WrappedSongReleaseRejectedEvent.InputTuple,
      WrappedSongReleaseRejectedEvent.OutputTuple,
      WrappedSongReleaseRejectedEvent.OutputObject
    >;
    WrappedSongReleaseRejected: TypedContractEvent<
      WrappedSongReleaseRejectedEvent.InputTuple,
      WrappedSongReleaseRejectedEvent.OutputTuple,
      WrappedSongReleaseRejectedEvent.OutputObject
    >;

    "WrappedSongReleaseRequested(address,address,address)": TypedContractEvent<
      WrappedSongReleaseRequestedEvent.InputTuple,
      WrappedSongReleaseRequestedEvent.OutputTuple,
      WrappedSongReleaseRequestedEvent.OutputObject
    >;
    WrappedSongReleaseRequested: TypedContractEvent<
      WrappedSongReleaseRequestedEvent.InputTuple,
      WrappedSongReleaseRequestedEvent.OutputTuple,
      WrappedSongReleaseRequestedEvent.OutputObject
    >;

    "WrappedSongReleased(address,address)": TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
    WrappedSongReleased: TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
  };
}
