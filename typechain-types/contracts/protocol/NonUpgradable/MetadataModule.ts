/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace MetadataModule {
  export type MetadataStruct = {
    name: string;
    description: string;
    image: string;
    externalUrl: string;
    animationUrl: string;
    attributesIpfsHash: string;
  };

  export type MetadataStructOutput = [
    name: string,
    description: string,
    image: string,
    externalUrl: string,
    animationUrl: string,
    attributesIpfsHash: string
  ] & {
    name: string;
    description: string;
    image: string;
    externalUrl: string;
    animationUrl: string;
    attributesIpfsHash: string;
  };
}

export interface MetadataModuleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "confirmUpdateMetadata"
      | "createMetadata"
      | "getPendingMetadataUpdate"
      | "getTokenMetadata"
      | "getTokenURI"
      | "isMetadataUpdateConfirmed"
      | "owner"
      | "protocolModule"
      | "rejectUpdateMetadata"
      | "removeMetadata"
      | "renounceOwnership"
      | "requestUpdateMetadata"
      | "transferOwnership"
      | "updateMetadata"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MetadataCreated"
      | "MetadataUpdateRejected"
      | "MetadataUpdateRequested"
      | "MetadataUpdated"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "confirmUpdateMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createMetadata",
    values: [AddressLike, MetadataModule.MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingMetadataUpdate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenURI",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMetadataUpdateConfirmed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectUpdateMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestUpdateMetadata",
    values: [AddressLike, MetadataModule.MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [AddressLike, MetadataModule.MetadataStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmUpdateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingMetadataUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMetadataUpdateConfirmed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectUpdateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestUpdateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;
}

export namespace MetadataCreatedEvent {
  export type InputTuple = [
    wrappedSong: AddressLike,
    newMetadata: MetadataModule.MetadataStruct
  ];
  export type OutputTuple = [
    wrappedSong: string,
    newMetadata: MetadataModule.MetadataStructOutput
  ];
  export interface OutputObject {
    wrappedSong: string;
    newMetadata: MetadataModule.MetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateRejectedEvent {
  export type InputTuple = [wrappedSong: AddressLike];
  export type OutputTuple = [wrappedSong: string];
  export interface OutputObject {
    wrappedSong: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdateRequestedEvent {
  export type InputTuple = [
    wrappedSong: AddressLike,
    newMetadata: MetadataModule.MetadataStruct
  ];
  export type OutputTuple = [
    wrappedSong: string,
    newMetadata: MetadataModule.MetadataStructOutput
  ];
  export interface OutputObject {
    wrappedSong: string;
    newMetadata: MetadataModule.MetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MetadataUpdatedEvent {
  export type InputTuple = [
    wrappedSong: AddressLike,
    newMetadata: MetadataModule.MetadataStruct
  ];
  export type OutputTuple = [
    wrappedSong: string,
    newMetadata: MetadataModule.MetadataStructOutput
  ];
  export interface OutputObject {
    wrappedSong: string;
    newMetadata: MetadataModule.MetadataStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MetadataModule extends BaseContract {
  connect(runner?: ContractRunner | null): MetadataModule;
  waitForDeployment(): Promise<this>;

  interface: MetadataModuleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  confirmUpdateMetadata: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  createMetadata: TypedContractMethod<
    [wrappedSong: AddressLike, newMetadata: MetadataModule.MetadataStruct],
    [void],
    "nonpayable"
  >;

  getPendingMetadataUpdate: TypedContractMethod<
    [wrappedSong: AddressLike],
    [MetadataModule.MetadataStructOutput],
    "view"
  >;

  getTokenMetadata: TypedContractMethod<
    [wrappedSong: AddressLike],
    [MetadataModule.MetadataStructOutput],
    "view"
  >;

  getTokenURI: TypedContractMethod<
    [wrappedSong: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;

  isMetadataUpdateConfirmed: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolModule: TypedContractMethod<[], [string], "view">;

  rejectUpdateMetadata: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  removeMetadata: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestUpdateMetadata: TypedContractMethod<
    [wrappedSong: AddressLike, newMetadata: MetadataModule.MetadataStruct],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMetadata: TypedContractMethod<
    [wrappedSong: AddressLike, newMetadata: MetadataModule.MetadataStruct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "confirmUpdateMetadata"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createMetadata"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, newMetadata: MetadataModule.MetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getPendingMetadataUpdate"
  ): TypedContractMethod<
    [wrappedSong: AddressLike],
    [MetadataModule.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenMetadata"
  ): TypedContractMethod<
    [wrappedSong: AddressLike],
    [MetadataModule.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTokenURI"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, tokenId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMetadataUpdateConfirmed"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectUpdateMetadata"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeMetadata"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestUpdateMetadata"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, newMetadata: MetadataModule.MetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMetadata"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, newMetadata: MetadataModule.MetadataStruct],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "MetadataCreated"
  ): TypedContractEvent<
    MetadataCreatedEvent.InputTuple,
    MetadataCreatedEvent.OutputTuple,
    MetadataCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdateRejected"
  ): TypedContractEvent<
    MetadataUpdateRejectedEvent.InputTuple,
    MetadataUpdateRejectedEvent.OutputTuple,
    MetadataUpdateRejectedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdateRequested"
  ): TypedContractEvent<
    MetadataUpdateRequestedEvent.InputTuple,
    MetadataUpdateRequestedEvent.OutputTuple,
    MetadataUpdateRequestedEvent.OutputObject
  >;
  getEvent(
    key: "MetadataUpdated"
  ): TypedContractEvent<
    MetadataUpdatedEvent.InputTuple,
    MetadataUpdatedEvent.OutputTuple,
    MetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "MetadataCreated(address,tuple)": TypedContractEvent<
      MetadataCreatedEvent.InputTuple,
      MetadataCreatedEvent.OutputTuple,
      MetadataCreatedEvent.OutputObject
    >;
    MetadataCreated: TypedContractEvent<
      MetadataCreatedEvent.InputTuple,
      MetadataCreatedEvent.OutputTuple,
      MetadataCreatedEvent.OutputObject
    >;

    "MetadataUpdateRejected(address)": TypedContractEvent<
      MetadataUpdateRejectedEvent.InputTuple,
      MetadataUpdateRejectedEvent.OutputTuple,
      MetadataUpdateRejectedEvent.OutputObject
    >;
    MetadataUpdateRejected: TypedContractEvent<
      MetadataUpdateRejectedEvent.InputTuple,
      MetadataUpdateRejectedEvent.OutputTuple,
      MetadataUpdateRejectedEvent.OutputObject
    >;

    "MetadataUpdateRequested(address,tuple)": TypedContractEvent<
      MetadataUpdateRequestedEvent.InputTuple,
      MetadataUpdateRequestedEvent.OutputTuple,
      MetadataUpdateRequestedEvent.OutputObject
    >;
    MetadataUpdateRequested: TypedContractEvent<
      MetadataUpdateRequestedEvent.InputTuple,
      MetadataUpdateRequestedEvent.OutputTuple,
      MetadataUpdateRequestedEvent.OutputObject
    >;

    "MetadataUpdated(address,tuple)": TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;
    MetadataUpdated: TypedContractEvent<
      MetadataUpdatedEvent.InputTuple,
      MetadataUpdatedEvent.OutputTuple,
      MetadataUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
