/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace SongSharesMarketPlace {
  export type SaleStruct = {
    active: boolean;
    seller: AddressLike;
    sharesForSale: BigNumberish;
    pricePerShare: BigNumberish;
    maxSharesPerWallet: BigNumberish;
    totalSold: BigNumberish;
    stableCoin: AddressLike;
  };

  export type SaleStructOutput = [
    active: boolean,
    seller: string,
    sharesForSale: bigint,
    pricePerShare: bigint,
    maxSharesPerWallet: bigint,
    totalSold: bigint,
    stableCoin: string
  ] & {
    active: boolean;
    seller: string;
    sharesForSale: bigint;
    pricePerShare: bigint;
    maxSharesPerWallet: bigint;
    totalSold: bigint;
    stableCoin: string;
  };
}

export interface SongSharesMarketPlaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "accumulatedFunds"
      | "buyShares"
      | "buyerPurchases"
      | "endSale"
      | "getSale"
      | "isApprovedForShares"
      | "isSaleExpired"
      | "owner"
      | "pause"
      | "paused"
      | "protocolModule"
      | "renounceOwnership"
      | "saleStartTimes"
      | "sales"
      | "startSale"
      | "transferOwnership"
      | "unpause"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC20Received"
      | "FundsWithdrawn"
      | "OwnershipTransferred"
      | "Paused"
      | "SharesSaleEnded"
      | "SharesSaleStarted"
      | "SharesSold"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "accumulatedFunds",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyShares",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyerPurchases",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "endSale",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSale",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForShares",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSaleExpired",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "saleStartTimes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "sales", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "startSale",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "accumulatedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyerPurchases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endSale", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isSaleExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "saleStartTimes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sales", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace ERC20ReceivedEvent {
  export type InputTuple = [
    wsTokenManagement: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    wsTokenManagement: string,
    token: string,
    amount: bigint,
    sender: string
  ];
  export interface OutputObject {
    wsTokenManagement: string;
    token: string;
    amount: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [
    wsTokenManagement: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    wsTokenManagement: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    wsTokenManagement: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesSaleEndedEvent {
  export type InputTuple = [wsTokenManagement: AddressLike];
  export type OutputTuple = [wsTokenManagement: string];
  export interface OutputObject {
    wsTokenManagement: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesSaleStartedEvent {
  export type InputTuple = [
    wsTokenManagement: AddressLike,
    owner: AddressLike,
    amount: BigNumberish,
    price: BigNumberish,
    maxSharesPerWallet: BigNumberish,
    stableCoinAddress: AddressLike
  ];
  export type OutputTuple = [
    wsTokenManagement: string,
    owner: string,
    amount: bigint,
    price: bigint,
    maxSharesPerWallet: bigint,
    stableCoinAddress: string
  ];
  export interface OutputObject {
    wsTokenManagement: string;
    owner: string;
    amount: bigint;
    price: bigint;
    maxSharesPerWallet: bigint;
    stableCoinAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SharesSoldEvent {
  export type InputTuple = [
    wsTokenManagement: AddressLike,
    buyer: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish,
    totalCost: BigNumberish,
    paymentToken: AddressLike
  ];
  export type OutputTuple = [
    wsTokenManagement: string,
    buyer: string,
    recipient: string,
    amount: bigint,
    totalCost: bigint,
    paymentToken: string
  ];
  export interface OutputObject {
    wsTokenManagement: string;
    buyer: string;
    recipient: string;
    amount: bigint;
    totalCost: bigint;
    paymentToken: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SongSharesMarketPlace extends BaseContract {
  connect(runner?: ContractRunner | null): SongSharesMarketPlace;
  waitForDeployment(): Promise<this>;

  interface: SongSharesMarketPlaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  accumulatedFunds: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  buyShares: TypedContractMethod<
    [wrappedSong: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;

  buyerPurchases: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  endSale: TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [void],
    "nonpayable"
  >;

  getSale: TypedContractMethod<
    [wrappedSong: AddressLike],
    [SongSharesMarketPlace.SaleStructOutput],
    "view"
  >;

  isApprovedForShares: TypedContractMethod<
    [wrappedSong: AddressLike, seller: AddressLike],
    [boolean],
    "view"
  >;

  isSaleExpired: TypedContractMethod<
    [wrappedSong: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  protocolModule: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  saleStartTimes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  sales: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, bigint, bigint, bigint, bigint, string] & {
        active: boolean;
        seller: string;
        sharesForSale: bigint;
        pricePerShare: bigint;
        maxSharesPerWallet: bigint;
        totalSold: bigint;
        stableCoin: string;
      }
    ],
    "view"
  >;

  startSale: TypedContractMethod<
    [
      wrappedSong: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      maxShares: BigNumberish,
      _stableCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawFunds: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "accumulatedFunds"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "buyShares"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "buyerPurchases"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "endSale"
  ): TypedContractMethod<
    [wsTokenManagement: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSale"
  ): TypedContractMethod<
    [wrappedSong: AddressLike],
    [SongSharesMarketPlace.SaleStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForShares"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, seller: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isSaleExpired"
  ): TypedContractMethod<[wrappedSong: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "saleStartTimes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "sales"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, bigint, bigint, bigint, bigint, string] & {
        active: boolean;
        seller: string;
        sharesForSale: bigint;
        pricePerShare: bigint;
        maxSharesPerWallet: bigint;
        totalSold: bigint;
        stableCoin: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "startSale"
  ): TypedContractMethod<
    [
      wrappedSong: AddressLike,
      amount: BigNumberish,
      price: BigNumberish,
      maxShares: BigNumberish,
      _stableCoin: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ERC20Received"
  ): TypedContractEvent<
    ERC20ReceivedEvent.InputTuple,
    ERC20ReceivedEvent.OutputTuple,
    ERC20ReceivedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SharesSaleEnded"
  ): TypedContractEvent<
    SharesSaleEndedEvent.InputTuple,
    SharesSaleEndedEvent.OutputTuple,
    SharesSaleEndedEvent.OutputObject
  >;
  getEvent(
    key: "SharesSaleStarted"
  ): TypedContractEvent<
    SharesSaleStartedEvent.InputTuple,
    SharesSaleStartedEvent.OutputTuple,
    SharesSaleStartedEvent.OutputObject
  >;
  getEvent(
    key: "SharesSold"
  ): TypedContractEvent<
    SharesSoldEvent.InputTuple,
    SharesSoldEvent.OutputTuple,
    SharesSoldEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ERC20Received(address,address,uint256,address)": TypedContractEvent<
      ERC20ReceivedEvent.InputTuple,
      ERC20ReceivedEvent.OutputTuple,
      ERC20ReceivedEvent.OutputObject
    >;
    ERC20Received: TypedContractEvent<
      ERC20ReceivedEvent.InputTuple,
      ERC20ReceivedEvent.OutputTuple,
      ERC20ReceivedEvent.OutputObject
    >;

    "FundsWithdrawn(address,address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SharesSaleEnded(address)": TypedContractEvent<
      SharesSaleEndedEvent.InputTuple,
      SharesSaleEndedEvent.OutputTuple,
      SharesSaleEndedEvent.OutputObject
    >;
    SharesSaleEnded: TypedContractEvent<
      SharesSaleEndedEvent.InputTuple,
      SharesSaleEndedEvent.OutputTuple,
      SharesSaleEndedEvent.OutputObject
    >;

    "SharesSaleStarted(address,address,uint256,uint256,uint256,address)": TypedContractEvent<
      SharesSaleStartedEvent.InputTuple,
      SharesSaleStartedEvent.OutputTuple,
      SharesSaleStartedEvent.OutputObject
    >;
    SharesSaleStarted: TypedContractEvent<
      SharesSaleStartedEvent.InputTuple,
      SharesSaleStartedEvent.OutputTuple,
      SharesSaleStartedEvent.OutputObject
    >;

    "SharesSold(address,address,address,uint256,uint256,address)": TypedContractEvent<
      SharesSoldEvent.InputTuple,
      SharesSoldEvent.OutputTuple,
      SharesSoldEvent.OutputObject
    >;
    SharesSold: TypedContractEvent<
      SharesSoldEvent.InputTuple,
      SharesSoldEvent.OutputTuple,
      SharesSoldEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
