/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface DistributorWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptWrappedSongForReview"
      | "confirmUpdateMetadata"
      | "confirmWrappedSongRelease"
      | "currentBatchIndex"
      | "managedWrappedSongs"
      | "owner"
      | "protocolModule"
      | "receiveBatchPaymentETH"
      | "receiveBatchPaymentStablecoin"
      | "receiveERC20"
      | "receivePaymentETH"
      | "receivePaymentStablecoin"
      | "redeemETH"
      | "redeemWrappedSongEarnings"
      | "rejectUpdateMetadata"
      | "rejectWrappedSongRelease"
      | "renounceOwnership"
      | "stablecoin"
      | "transferOwnership"
      | "wrappedSongTreasury"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundsReceived"
      | "OwnershipTransferred"
      | "WrappedSongAcceptedForReview"
      | "WrappedSongRedeemed"
      | "WrappedSongReleaseRejected"
      | "WrappedSongReleaseRequested"
      | "WrappedSongReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptWrappedSongForReview",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmUpdateMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentBatchIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "managedWrappedSongs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBatchPaymentETH",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveBatchPaymentStablecoin",
    values: [AddressLike[], BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "receiveERC20",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivePaymentETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "receivePaymentStablecoin",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemETH",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemWrappedSongEarnings",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectUpdateMetadata",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongTreasury",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptWrappedSongForReview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmUpdateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBatchIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "managedWrappedSongs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBatchPaymentETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveBatchPaymentStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePaymentETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePaymentStablecoin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeemETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWrappedSongEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectUpdateMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongTreasury",
    data: BytesLike
  ): Result;
}

export namespace FundsReceivedEvent {
  export type InputTuple = [
    from: AddressLike,
    amount: BigNumberish,
    currency: string,
    wrappedSongs: AddressLike[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    from: string,
    amount: bigint,
    currency: string,
    wrappedSongs: string[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    from: string;
    amount: bigint;
    currency: string;
    wrappedSongs: string[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongAcceptedForReviewEvent {
  export type InputTuple = [wrappedSong: AddressLike];
  export type OutputTuple = [wrappedSong: string];
  export interface OutputObject {
    wrappedSong: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongRedeemedEvent {
  export type InputTuple = [wrappedSong: AddressLike, amount: BigNumberish];
  export type OutputTuple = [wrappedSong: string, amount: bigint];
  export interface OutputObject {
    wrappedSong: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleaseRejectedEvent {
  export type InputTuple = [wrappedSong: AddressLike];
  export type OutputTuple = [wrappedSong: string];
  export interface OutputObject {
    wrappedSong: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleaseRequestedEvent {
  export type InputTuple = [wrappedSong: AddressLike];
  export type OutputTuple = [wrappedSong: string];
  export interface OutputObject {
    wrappedSong: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleasedEvent {
  export type InputTuple = [wrappedSong: AddressLike];
  export type OutputTuple = [wrappedSong: string];
  export interface OutputObject {
    wrappedSong: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DistributorWallet extends BaseContract {
  connect(runner?: ContractRunner | null): DistributorWallet;
  waitForDeployment(): Promise<this>;

  interface: DistributorWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptWrappedSongForReview: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmUpdateMetadata: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  confirmWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  currentBatchIndex: TypedContractMethod<[], [bigint], "view">;

  managedWrappedSongs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolModule: TypedContractMethod<[], [string], "view">;

  receiveBatchPaymentETH: TypedContractMethod<
    [_wrappedSongs: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "payable"
  >;

  receiveBatchPaymentStablecoin: TypedContractMethod<
    [
      _wrappedSongs: AddressLike[],
      _amounts: BigNumberish[],
      _totalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  receiveERC20: TypedContractMethod<[], [void], "nonpayable">;

  receivePaymentETH: TypedContractMethod<
    [_wrappedSong: AddressLike],
    [void],
    "payable"
  >;

  receivePaymentStablecoin: TypedContractMethod<
    [_wrappedSong: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  redeemETH: TypedContractMethod<
    [_wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  redeemWrappedSongEarnings: TypedContractMethod<
    [_wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  rejectUpdateMetadata: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  rejectWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  stablecoin: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  wrappedSongTreasury: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptWrappedSongForReview"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmUpdateMetadata"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "confirmWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentBatchIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "managedWrappedSongs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "receiveBatchPaymentETH"
  ): TypedContractMethod<
    [_wrappedSongs: AddressLike[], _amounts: BigNumberish[]],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "receiveBatchPaymentStablecoin"
  ): TypedContractMethod<
    [
      _wrappedSongs: AddressLike[],
      _amounts: BigNumberish[],
      _totalAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "receiveERC20"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "receivePaymentETH"
  ): TypedContractMethod<[_wrappedSong: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "receivePaymentStablecoin"
  ): TypedContractMethod<
    [_wrappedSong: AddressLike, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "redeemETH"
  ): TypedContractMethod<[_wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "redeemWrappedSongEarnings"
  ): TypedContractMethod<[_wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rejectUpdateMetadata"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rejectWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stablecoin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "wrappedSongTreasury"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "FundsReceived"
  ): TypedContractEvent<
    FundsReceivedEvent.InputTuple,
    FundsReceivedEvent.OutputTuple,
    FundsReceivedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongAcceptedForReview"
  ): TypedContractEvent<
    WrappedSongAcceptedForReviewEvent.InputTuple,
    WrappedSongAcceptedForReviewEvent.OutputTuple,
    WrappedSongAcceptedForReviewEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongRedeemed"
  ): TypedContractEvent<
    WrappedSongRedeemedEvent.InputTuple,
    WrappedSongRedeemedEvent.OutputTuple,
    WrappedSongRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleaseRejected"
  ): TypedContractEvent<
    WrappedSongReleaseRejectedEvent.InputTuple,
    WrappedSongReleaseRejectedEvent.OutputTuple,
    WrappedSongReleaseRejectedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleaseRequested"
  ): TypedContractEvent<
    WrappedSongReleaseRequestedEvent.InputTuple,
    WrappedSongReleaseRequestedEvent.OutputTuple,
    WrappedSongReleaseRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleased"
  ): TypedContractEvent<
    WrappedSongReleasedEvent.InputTuple,
    WrappedSongReleasedEvent.OutputTuple,
    WrappedSongReleasedEvent.OutputObject
  >;

  filters: {
    "FundsReceived(address,uint256,string,address[],uint256[])": TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;
    FundsReceived: TypedContractEvent<
      FundsReceivedEvent.InputTuple,
      FundsReceivedEvent.OutputTuple,
      FundsReceivedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WrappedSongAcceptedForReview(address)": TypedContractEvent<
      WrappedSongAcceptedForReviewEvent.InputTuple,
      WrappedSongAcceptedForReviewEvent.OutputTuple,
      WrappedSongAcceptedForReviewEvent.OutputObject
    >;
    WrappedSongAcceptedForReview: TypedContractEvent<
      WrappedSongAcceptedForReviewEvent.InputTuple,
      WrappedSongAcceptedForReviewEvent.OutputTuple,
      WrappedSongAcceptedForReviewEvent.OutputObject
    >;

    "WrappedSongRedeemed(address,uint256)": TypedContractEvent<
      WrappedSongRedeemedEvent.InputTuple,
      WrappedSongRedeemedEvent.OutputTuple,
      WrappedSongRedeemedEvent.OutputObject
    >;
    WrappedSongRedeemed: TypedContractEvent<
      WrappedSongRedeemedEvent.InputTuple,
      WrappedSongRedeemedEvent.OutputTuple,
      WrappedSongRedeemedEvent.OutputObject
    >;

    "WrappedSongReleaseRejected(address)": TypedContractEvent<
      WrappedSongReleaseRejectedEvent.InputTuple,
      WrappedSongReleaseRejectedEvent.OutputTuple,
      WrappedSongReleaseRejectedEvent.OutputObject
    >;
    WrappedSongReleaseRejected: TypedContractEvent<
      WrappedSongReleaseRejectedEvent.InputTuple,
      WrappedSongReleaseRejectedEvent.OutputTuple,
      WrappedSongReleaseRejectedEvent.OutputObject
    >;

    "WrappedSongReleaseRequested(address)": TypedContractEvent<
      WrappedSongReleaseRequestedEvent.InputTuple,
      WrappedSongReleaseRequestedEvent.OutputTuple,
      WrappedSongReleaseRequestedEvent.OutputObject
    >;
    WrappedSongReleaseRequested: TypedContractEvent<
      WrappedSongReleaseRequestedEvent.InputTuple,
      WrappedSongReleaseRequestedEvent.OutputTuple,
      WrappedSongReleaseRequestedEvent.OutputObject
    >;

    "WrappedSongReleased(address)": TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
    WrappedSongReleased: TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
  };
}
