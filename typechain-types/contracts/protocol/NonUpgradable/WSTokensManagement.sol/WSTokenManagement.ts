/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface WSTokenManagementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BUYOUT_TOKEN_ID"
      | "LEGAL_CONTRACT_START_ID"
      | "SONG_CONCEPT_ID"
      | "SONG_SHARES_ID"
      | "balanceOf"
      | "balanceOfBatch"
      | "createBuyoutToken"
      | "createLegalContract"
      | "createSongShares"
      | "currentLegalContractId"
      | "exists"
      | "isApprovedForAll"
      | "isLegalContract"
      | "legalContractURIs"
      | "metadataModule"
      | "migrateWrappedSong"
      | "owner"
      | "protocolModule"
      | "renounceOwnership"
      | "safeBatchTransferFrom"
      | "safeTransferFrom"
      | "setApprovalForAll"
      | "supportsInterface"
      | "totalShares"
      | "totalSupply()"
      | "totalSupply(uint256)"
      | "transferOwnership"
      | "updateLegalContractURI"
      | "uri"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ApprovalForAll"
      | "BuyoutTokenCreated"
      | "LegalContractCreated"
      | "LegalContractURIUpdated"
      | "OwnershipTransferred"
      | "SongSharesCreated"
      | "TransferBatch"
      | "TransferSingle"
      | "URI"
      | "WSTokensCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BUYOUT_TOKEN_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEGAL_CONTRACT_START_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SONG_CONCEPT_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SONG_SHARES_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createBuyoutToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createLegalContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createSongShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentLegalContractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLegalContract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "legalContractURIs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrateWrappedSong",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalShares",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLegalContractURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "BUYOUT_TOKEN_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEGAL_CONTRACT_START_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SONG_CONCEPT_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SONG_SHARES_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBuyoutToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLegalContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSongShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentLegalContractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLegalContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "legalContractURIs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "migrateWrappedSong",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "protocolModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLegalContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BuyoutTokenCreatedEvent {
  export type InputTuple = [amount: BigNumberish, recipient: AddressLike];
  export type OutputTuple = [amount: bigint, recipient: string];
  export interface OutputObject {
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LegalContractCreatedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    recipient: AddressLike,
    contractURI: string
  ];
  export type OutputTuple = [
    tokenId: bigint,
    recipient: string,
    contractURI: string
  ];
  export interface OutputObject {
    tokenId: bigint;
    recipient: string;
    contractURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LegalContractURIUpdatedEvent {
  export type InputTuple = [tokenId: BigNumberish, newURI: string];
  export type OutputTuple = [tokenId: bigint, newURI: string];
  export interface OutputObject {
    tokenId: bigint;
    newURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SongSharesCreatedEvent {
  export type InputTuple = [sharesAmount: BigNumberish, minter: AddressLike];
  export type OutputTuple = [sharesAmount: bigint, minter: string];
  export interface OutputObject {
    sharesAmount: bigint;
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace URIEvent {
  export type InputTuple = [value: string, id: BigNumberish];
  export type OutputTuple = [value: string, id: bigint];
  export interface OutputObject {
    value: string;
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WSTokensCreatedEvent {
  export type InputTuple = [smartAccount: AddressLike, minter: AddressLike];
  export type OutputTuple = [smartAccount: string, minter: string];
  export interface OutputObject {
    smartAccount: string;
    minter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WSTokenManagement extends BaseContract {
  connect(runner?: ContractRunner | null): WSTokenManagement;
  waitForDeployment(): Promise<this>;

  interface: WSTokenManagementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BUYOUT_TOKEN_ID: TypedContractMethod<[], [bigint], "view">;

  LEGAL_CONTRACT_START_ID: TypedContractMethod<[], [bigint], "view">;

  SONG_CONCEPT_ID: TypedContractMethod<[], [bigint], "view">;

  SONG_SHARES_ID: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;

  balanceOfBatch: TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;

  createBuyoutToken: TypedContractMethod<
    [amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  createLegalContract: TypedContractMethod<
    [contractURI: string],
    [bigint],
    "nonpayable"
  >;

  createSongShares: TypedContractMethod<
    [sharesAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  currentLegalContractId: TypedContractMethod<[], [bigint], "view">;

  exists: TypedContractMethod<[id: BigNumberish], [boolean], "view">;

  isApprovedForAll: TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isLegalContract: TypedContractMethod<
    [tokenId: BigNumberish],
    [boolean],
    "view"
  >;

  legalContractURIs: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  metadataModule: TypedContractMethod<[], [string], "view">;

  migrateWrappedSong: TypedContractMethod<
    [metadataAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  protocolModule: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  safeBatchTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  safeTransferFrom: TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalShares: TypedContractMethod<[], [bigint], "view">;

  "totalSupply()": TypedContractMethod<[], [bigint], "view">;

  "totalSupply(uint256)": TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateLegalContractURI: TypedContractMethod<
    [tokenId: BigNumberish, newURI: string],
    [void],
    "nonpayable"
  >;

  uri: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BUYOUT_TOKEN_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LEGAL_CONTRACT_START_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SONG_CONCEPT_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SONG_SHARES_ID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOfBatch"
  ): TypedContractMethod<
    [accounts: AddressLike[], ids: BigNumberish[]],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "createBuyoutToken"
  ): TypedContractMethod<
    [amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createLegalContract"
  ): TypedContractMethod<[contractURI: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "createSongShares"
  ): TypedContractMethod<[sharesAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentLegalContractId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[id: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [account: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLegalContract"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "legalContractURIs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "metadataModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "migrateWrappedSong"
  ): TypedContractMethod<[metadataAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolModule"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "safeBatchTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalShares"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply(uint256)"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLegalContractURI"
  ): TypedContractMethod<
    [tokenId: BigNumberish, newURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uri"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BuyoutTokenCreated"
  ): TypedContractEvent<
    BuyoutTokenCreatedEvent.InputTuple,
    BuyoutTokenCreatedEvent.OutputTuple,
    BuyoutTokenCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LegalContractCreated"
  ): TypedContractEvent<
    LegalContractCreatedEvent.InputTuple,
    LegalContractCreatedEvent.OutputTuple,
    LegalContractCreatedEvent.OutputObject
  >;
  getEvent(
    key: "LegalContractURIUpdated"
  ): TypedContractEvent<
    LegalContractURIUpdatedEvent.InputTuple,
    LegalContractURIUpdatedEvent.OutputTuple,
    LegalContractURIUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SongSharesCreated"
  ): TypedContractEvent<
    SongSharesCreatedEvent.InputTuple,
    SongSharesCreatedEvent.OutputTuple,
    SongSharesCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "URI"
  ): TypedContractEvent<
    URIEvent.InputTuple,
    URIEvent.OutputTuple,
    URIEvent.OutputObject
  >;
  getEvent(
    key: "WSTokensCreated"
  ): TypedContractEvent<
    WSTokensCreatedEvent.InputTuple,
    WSTokensCreatedEvent.OutputTuple,
    WSTokensCreatedEvent.OutputObject
  >;

  filters: {
    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BuyoutTokenCreated(uint256,address)": TypedContractEvent<
      BuyoutTokenCreatedEvent.InputTuple,
      BuyoutTokenCreatedEvent.OutputTuple,
      BuyoutTokenCreatedEvent.OutputObject
    >;
    BuyoutTokenCreated: TypedContractEvent<
      BuyoutTokenCreatedEvent.InputTuple,
      BuyoutTokenCreatedEvent.OutputTuple,
      BuyoutTokenCreatedEvent.OutputObject
    >;

    "LegalContractCreated(uint256,address,string)": TypedContractEvent<
      LegalContractCreatedEvent.InputTuple,
      LegalContractCreatedEvent.OutputTuple,
      LegalContractCreatedEvent.OutputObject
    >;
    LegalContractCreated: TypedContractEvent<
      LegalContractCreatedEvent.InputTuple,
      LegalContractCreatedEvent.OutputTuple,
      LegalContractCreatedEvent.OutputObject
    >;

    "LegalContractURIUpdated(uint256,string)": TypedContractEvent<
      LegalContractURIUpdatedEvent.InputTuple,
      LegalContractURIUpdatedEvent.OutputTuple,
      LegalContractURIUpdatedEvent.OutputObject
    >;
    LegalContractURIUpdated: TypedContractEvent<
      LegalContractURIUpdatedEvent.InputTuple,
      LegalContractURIUpdatedEvent.OutputTuple,
      LegalContractURIUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SongSharesCreated(uint256,address)": TypedContractEvent<
      SongSharesCreatedEvent.InputTuple,
      SongSharesCreatedEvent.OutputTuple,
      SongSharesCreatedEvent.OutputObject
    >;
    SongSharesCreated: TypedContractEvent<
      SongSharesCreatedEvent.InputTuple,
      SongSharesCreatedEvent.OutputTuple,
      SongSharesCreatedEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "URI(string,uint256)": TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;
    URI: TypedContractEvent<
      URIEvent.InputTuple,
      URIEvent.OutputTuple,
      URIEvent.OutputObject
    >;

    "WSTokensCreated(address,address)": TypedContractEvent<
      WSTokensCreatedEvent.InputTuple,
      WSTokensCreatedEvent.OutputTuple,
      WSTokensCreatedEvent.OutputObject
    >;
    WSTokensCreated: TypedContractEvent<
      WSTokensCreatedEvent.InputTuple,
      WSTokensCreatedEvent.OutputTuple,
      WSTokensCreatedEvent.OutputObject
    >;
  };
}
