/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ERC20WhitelistInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedCaller"
      | "getWhitelistedTokenAtIndex"
      | "getWhitelistedTokenCount"
      | "isTokenWhitelisted"
      | "owner"
      | "removeTokenFromWhitelist"
      | "renounceOwnership"
      | "setAuthorizedCaller"
      | "transferOwnership"
      | "whitelistToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizedCallerSet"
      | "OwnershipTransferred"
      | "TokenRemovedFromWhitelist"
      | "TokenWhitelisted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedCaller",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedTokenAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedTokenCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTokenFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedCaller",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedTokenAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedTokenCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTokenFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistToken",
    data: BytesLike
  ): Result;
}

export namespace AuthorizedCallerSetEvent {
  export type InputTuple = [caller: AddressLike];
  export type OutputTuple = [caller: string];
  export interface OutputObject {
    caller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenRemovedFromWhitelistEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenWhitelistedEvent {
  export type InputTuple = [token: AddressLike, name: string, symbol: string];
  export type OutputTuple = [token: string, name: string, symbol: string];
  export interface OutputObject {
    token: string;
    name: string;
    symbol: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ERC20Whitelist extends BaseContract {
  connect(runner?: ContractRunner | null): ERC20Whitelist;
  waitForDeployment(): Promise<this>;

  interface: ERC20WhitelistInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedCaller: TypedContractMethod<[], [string], "view">;

  getWhitelistedTokenAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getWhitelistedTokenCount: TypedContractMethod<[], [bigint], "view">;

  isTokenWhitelisted: TypedContractMethod<
    [token: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  removeTokenFromWhitelist: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuthorizedCaller: TypedContractMethod<
    [_caller: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  whitelistToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedCaller"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedTokenAtIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedTokenCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isTokenWhitelisted"
  ): TypedContractMethod<[token: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeTokenFromWhitelist"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuthorizedCaller"
  ): TypedContractMethod<[_caller: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "whitelistToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AuthorizedCallerSet"
  ): TypedContractEvent<
    AuthorizedCallerSetEvent.InputTuple,
    AuthorizedCallerSetEvent.OutputTuple,
    AuthorizedCallerSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TokenRemovedFromWhitelist"
  ): TypedContractEvent<
    TokenRemovedFromWhitelistEvent.InputTuple,
    TokenRemovedFromWhitelistEvent.OutputTuple,
    TokenRemovedFromWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "TokenWhitelisted"
  ): TypedContractEvent<
    TokenWhitelistedEvent.InputTuple,
    TokenWhitelistedEvent.OutputTuple,
    TokenWhitelistedEvent.OutputObject
  >;

  filters: {
    "AuthorizedCallerSet(address)": TypedContractEvent<
      AuthorizedCallerSetEvent.InputTuple,
      AuthorizedCallerSetEvent.OutputTuple,
      AuthorizedCallerSetEvent.OutputObject
    >;
    AuthorizedCallerSet: TypedContractEvent<
      AuthorizedCallerSetEvent.InputTuple,
      AuthorizedCallerSetEvent.OutputTuple,
      AuthorizedCallerSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TokenRemovedFromWhitelist(address)": TypedContractEvent<
      TokenRemovedFromWhitelistEvent.InputTuple,
      TokenRemovedFromWhitelistEvent.OutputTuple,
      TokenRemovedFromWhitelistEvent.OutputObject
    >;
    TokenRemovedFromWhitelist: TypedContractEvent<
      TokenRemovedFromWhitelistEvent.InputTuple,
      TokenRemovedFromWhitelistEvent.OutputTuple,
      TokenRemovedFromWhitelistEvent.OutputObject
    >;

    "TokenWhitelisted(address,string,string)": TypedContractEvent<
      TokenWhitelistedEvent.InputTuple,
      TokenWhitelistedEvent.OutputTuple,
      TokenWhitelistedEvent.OutputObject
    >;
    TokenWhitelisted: TypedContractEvent<
      TokenWhitelistedEvent.InputTuple,
      TokenWhitelistedEvent.OutputTuple,
      TokenWhitelistedEvent.OutputObject
    >;
  };
}
