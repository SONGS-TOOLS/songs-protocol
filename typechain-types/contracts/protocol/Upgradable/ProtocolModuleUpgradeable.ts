/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ProtocolModuleUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "addISCC"
      | "addISRC"
      | "addISWC"
      | "addUPC"
      | "confirmWrappedSongRelease"
      | "distributorWalletFactory"
      | "getPendingDistributor"
      | "getWrappedSongDistributor"
      | "initialize"
      | "isccRegistry"
      | "isrcRegistry"
      | "iswcRegistry"
      | "owner"
      | "pendingDistributorRequests"
      | "proxiableUUID"
      | "rejectWrappedSongRelease"
      | "releaseFee"
      | "removeWrappedSongReleaseRequest"
      | "renounceOwnership"
      | "requestWrappedSongRelease"
      | "setReleaseFee"
      | "setWhitelistingManager"
      | "setWrappedSongCreationFee"
      | "transferOwnership"
      | "upcRegistry"
      | "updateDistributorWalletFactory"
      | "upgradeToAndCall"
      | "whitelistingManager"
      | "wrappedSongCreationFee"
      | "wrappedSongToDistributor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
      | "WrappedSongReleaseRequested"
      | "WrappedSongReleased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addISCC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addISRC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addISWC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addUPC",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributorWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWrappedSongDistributor",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isccRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isrcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "iswcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingDistributorRequests",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectWrappedSongRelease",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWrappedSongReleaseRequest",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestWrappedSongRelease",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReleaseFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistingManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWrappedSongCreationFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upcRegistry",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDistributorWalletFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongCreationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "wrappedSongToDistributor",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addISCC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addISRC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addISWC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addUPC", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributorWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWrappedSongDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isccRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isrcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "iswcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingDistributorRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releaseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWrappedSongReleaseRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWrappedSongRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReleaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWrappedSongCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upcRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDistributorWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongCreationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wrappedSongToDistributor",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleaseRequestedEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WrappedSongReleasedEvent {
  export type InputTuple = [wrappedSong: AddressLike, distributor: AddressLike];
  export type OutputTuple = [wrappedSong: string, distributor: string];
  export interface OutputObject {
    wrappedSong: string;
    distributor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ProtocolModuleUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): ProtocolModuleUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: ProtocolModuleUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addISCC: TypedContractMethod<
    [wrappedSong: AddressLike, iscc: string],
    [void],
    "nonpayable"
  >;

  addISRC: TypedContractMethod<
    [wrappedSong: AddressLike, isrc: string],
    [void],
    "nonpayable"
  >;

  addISWC: TypedContractMethod<
    [wrappedSong: AddressLike, iswc: string],
    [void],
    "nonpayable"
  >;

  addUPC: TypedContractMethod<
    [wrappedSong: AddressLike, upc: string],
    [void],
    "nonpayable"
  >;

  confirmWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  distributorWalletFactory: TypedContractMethod<[], [string], "view">;

  getPendingDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  getWrappedSongDistributor: TypedContractMethod<
    [wrappedSong: AddressLike],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [_distributorWalletFactory: AddressLike, _whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  isccRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  isrcRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  iswcRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pendingDistributorRequests: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rejectWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  releaseFee: TypedContractMethod<[], [bigint], "view">;

  removeWrappedSongReleaseRequest: TypedContractMethod<
    [wrappedSong: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestWrappedSongRelease: TypedContractMethod<
    [wrappedSong: AddressLike, distributor: AddressLike],
    [void],
    "nonpayable"
  >;

  setReleaseFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setWhitelistingManager: TypedContractMethod<
    [_whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setWrappedSongCreationFee: TypedContractMethod<
    [_fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upcRegistry: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  updateDistributorWalletFactory: TypedContractMethod<
    [_newFactory: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  whitelistingManager: TypedContractMethod<[], [string], "view">;

  wrappedSongCreationFee: TypedContractMethod<[], [bigint], "view">;

  wrappedSongToDistributor: TypedContractMethod<
    [arg0: AddressLike],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addISCC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, iscc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addISRC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, isrc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addISWC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, iswc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addUPC"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, upc: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confirmWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "distributorWalletFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPendingDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWrappedSongDistributor"
  ): TypedContractMethod<[wrappedSong: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_distributorWalletFactory: AddressLike, _whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isccRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isrcRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "iswcRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingDistributorRequests"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rejectWrappedSongRelease"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "releaseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "removeWrappedSongReleaseRequest"
  ): TypedContractMethod<[wrappedSong: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestWrappedSongRelease"
  ): TypedContractMethod<
    [wrappedSong: AddressLike, distributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReleaseFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistingManager"
  ): TypedContractMethod<
    [_whitelistingManager: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWrappedSongCreationFee"
  ): TypedContractMethod<[_fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upcRegistry"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "updateDistributorWalletFactory"
  ): TypedContractMethod<[_newFactory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whitelistingManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "wrappedSongCreationFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "wrappedSongToDistributor"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleaseRequested"
  ): TypedContractEvent<
    WrappedSongReleaseRequestedEvent.InputTuple,
    WrappedSongReleaseRequestedEvent.OutputTuple,
    WrappedSongReleaseRequestedEvent.OutputObject
  >;
  getEvent(
    key: "WrappedSongReleased"
  ): TypedContractEvent<
    WrappedSongReleasedEvent.InputTuple,
    WrappedSongReleasedEvent.OutputTuple,
    WrappedSongReleasedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WrappedSongReleaseRequested(address,address)": TypedContractEvent<
      WrappedSongReleaseRequestedEvent.InputTuple,
      WrappedSongReleaseRequestedEvent.OutputTuple,
      WrappedSongReleaseRequestedEvent.OutputObject
    >;
    WrappedSongReleaseRequested: TypedContractEvent<
      WrappedSongReleaseRequestedEvent.InputTuple,
      WrappedSongReleaseRequestedEvent.OutputTuple,
      WrappedSongReleaseRequestedEvent.OutputObject
    >;

    "WrappedSongReleased(address,address)": TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
    WrappedSongReleased: TypedContractEvent<
      WrappedSongReleasedEvent.InputTuple,
      WrappedSongReleasedEvent.OutputTuple,
      WrappedSongReleasedEvent.OutputObject
    >;
  };
}
