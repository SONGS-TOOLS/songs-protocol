/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MusicERC721FactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployMusicERC721"
      | "getDeployedContractsByOwner"
      | "ownerToContracts"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MusicERC721Deployed"): EventFragment;

  encodeFunctionData(
    functionFragment: "deployMusicERC721",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeployedContractsByOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerToContracts",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "deployMusicERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeployedContractsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerToContracts",
    data: BytesLike
  ): Result;
}

export namespace MusicERC721DeployedEvent {
  export type InputTuple = [
    owner: AddressLike,
    contractAddress: AddressLike,
    tokenURI: string
  ];
  export type OutputTuple = [
    owner: string,
    contractAddress: string,
    tokenURI: string
  ];
  export interface OutputObject {
    owner: string;
    contractAddress: string;
    tokenURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MusicERC721Factory extends BaseContract {
  connect(runner?: ContractRunner | null): MusicERC721Factory;
  waitForDeployment(): Promise<this>;

  interface: MusicERC721FactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployMusicERC721: TypedContractMethod<
    [name: string, symbol: string, metadataURI: string],
    [string],
    "nonpayable"
  >;

  getDeployedContractsByOwner: TypedContractMethod<
    [owner: AddressLike],
    [string[]],
    "view"
  >;

  ownerToContracts: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployMusicERC721"
  ): TypedContractMethod<
    [name: string, symbol: string, metadataURI: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDeployedContractsByOwner"
  ): TypedContractMethod<[owner: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "ownerToContracts"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "MusicERC721Deployed"
  ): TypedContractEvent<
    MusicERC721DeployedEvent.InputTuple,
    MusicERC721DeployedEvent.OutputTuple,
    MusicERC721DeployedEvent.OutputObject
  >;

  filters: {
    "MusicERC721Deployed(address,address,string)": TypedContractEvent<
      MusicERC721DeployedEvent.InputTuple,
      MusicERC721DeployedEvent.OutputTuple,
      MusicERC721DeployedEvent.OutputObject
    >;
    MusicERC721Deployed: TypedContractEvent<
      MusicERC721DeployedEvent.InputTuple,
      MusicERC721DeployedEvent.OutputTuple,
      MusicERC721DeployedEvent.OutputObject
    >;
  };
}
