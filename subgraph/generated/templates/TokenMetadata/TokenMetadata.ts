// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MetadataUpdated extends ethereum.Event {
  get params(): MetadataUpdated__Params {
    return new MetadataUpdated__Params(this);
  }
}

export class MetadataUpdated__Params {
  _event: MetadataUpdated;

  constructor(event: MetadataUpdated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newMetadata(): string {
    return this._event.parameters[1].value.toString();
  }

  get implementationAccount(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenMetadata__createsWrappedSongTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getSongId(): BigInt {
    return this.value0;
  }

  getNewSongSharesId(): BigInt {
    return this.value1;
  }
}

export class TokenMetadata__sharesForSaleResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPricePerShare(): BigInt {
    return this.value0;
  }

  getPercentageForSale(): BigInt {
    return this.value1;
  }
}

export class TokenMetadata extends ethereum.SmartContract {
  static bind(address: Address): TokenMetadata {
    return new TokenMetadata("TokenMetadata", address);
  }

  canReceiveERC20(): boolean {
    let result = super.call("canReceiveERC20", "canReceiveERC20():(bool)", []);

    return result[0].toBoolean();
  }

  try_canReceiveERC20(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canReceiveERC20",
      "canReceiveERC20():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkAuthenticity(): boolean {
    let result = super.call(
      "checkAuthenticity",
      "checkAuthenticity():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_checkAuthenticity(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkAuthenticity",
      "checkAuthenticity():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createFungibleSongShares(
    songId: BigInt,
    sharesAmount: BigInt,
    sharesURI: string,
    creator: Address,
  ): BigInt {
    let result = super.call(
      "createFungibleSongShares",
      "createFungibleSongShares(uint256,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(songId),
        ethereum.Value.fromUnsignedBigInt(sharesAmount),
        ethereum.Value.fromString(sharesURI),
        ethereum.Value.fromAddress(creator),
      ],
    );

    return result[0].toBigInt();
  }

  try_createFungibleSongShares(
    songId: BigInt,
    sharesAmount: BigInt,
    sharesURI: string,
    creator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createFungibleSongShares",
      "createFungibleSongShares(uint256,uint256,string,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(songId),
        ethereum.Value.fromUnsignedBigInt(sharesAmount),
        ethereum.Value.fromString(sharesURI),
        ethereum.Value.fromAddress(creator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createsSongToken(songURI: string, participants: Array<Address>): BigInt {
    let result = super.call(
      "createsSongToken",
      "createsSongToken(string,address[]):(uint256)",
      [
        ethereum.Value.fromString(songURI),
        ethereum.Value.fromAddressArray(participants),
      ],
    );

    return result[0].toBigInt();
  }

  try_createsSongToken(
    songURI: string,
    participants: Array<Address>,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createsSongToken",
      "createsSongToken(string,address[]):(uint256)",
      [
        ethereum.Value.fromString(songURI),
        ethereum.Value.fromAddressArray(participants),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createsWrappedSongTokens(
    songURI: string,
    sharesAmount: BigInt,
    sharesURI: string,
    creator: Address,
  ): TokenMetadata__createsWrappedSongTokensResult {
    let result = super.call(
      "createsWrappedSongTokens",
      "createsWrappedSongTokens(string,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromString(songURI),
        ethereum.Value.fromUnsignedBigInt(sharesAmount),
        ethereum.Value.fromString(sharesURI),
        ethereum.Value.fromAddress(creator),
      ],
    );

    return new TokenMetadata__createsWrappedSongTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_createsWrappedSongTokens(
    songURI: string,
    sharesAmount: BigInt,
    sharesURI: string,
    creator: Address,
  ): ethereum.CallResult<TokenMetadata__createsWrappedSongTokensResult> {
    let result = super.tryCall(
      "createsWrappedSongTokens",
      "createsWrappedSongTokens(string,uint256,string,address):(uint256,uint256)",
      [
        ethereum.Value.fromString(songURI),
        ethereum.Value.fromUnsignedBigInt(sharesAmount),
        ethereum.Value.fromString(sharesURI),
        ethereum.Value.fromAddress(creator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenMetadata__createsWrappedSongTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  distributorWallet(): Address {
    let result = super.call(
      "distributorWallet",
      "distributorWallet():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_distributorWallet(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "distributorWallet",
      "distributorWallet():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenBalance(tokenId: BigInt): BigInt {
    let result = super.call(
      "getTokenBalance",
      "getTokenBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBigInt();
  }

  try_getTokenBalance(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenBalance",
      "getTokenBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTokenMetadata(tokenId: BigInt): string {
    let result = super.call(
      "getTokenMetadata",
      "getTokenMetadata(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toString();
  }

  try_getTokenMetadata(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getTokenMetadata",
      "getTokenMetadata(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTotalSupplyOfShares(id: BigInt): BigInt {
    let result = super.call(
      "getTotalSupplyOfShares",
      "getTotalSupplyOfShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );

    return result[0].toBigInt();
  }

  try_getTotalSupplyOfShares(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalSupplyOfShares",
      "getTotalSupplyOfShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWSTokenManagementAddress(): Address {
    let result = super.call(
      "getWSTokenManagementAddress",
      "getWSTokenManagementAddress():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_getWSTokenManagementAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWSTokenManagementAddress",
      "getWSTokenManagementAddress():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWrappedSongMetadata(tokenId: BigInt): string {
    let result = super.call(
      "getWrappedSongMetadata",
      "getWrappedSongMetadata(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toString();
  }

  try_getWrappedSongMetadata(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getWrappedSongMetadata",
      "getWrappedSongMetadata(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  newWSTokenManagement(): Address {
    let result = super.call(
      "newWSTokenManagement",
      "newWSTokenManagement():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_newWSTokenManagement(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "newWSTokenManagement",
      "newWSTokenManagement():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    operator: Address,
    from: Address,
    ids: Array<BigInt>,
    values: Array<BigInt>,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigIntArray(ids),
        ethereum.Value.fromUnsignedBigIntArray(values),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes,
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    operator: Address,
    from: Address,
    id: BigInt,
    value: BigInt,
    data: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(id),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromBytes(data),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolModule(): Address {
    let result = super.call("protocolModule", "protocolModule():(address)", []);

    return result[0].toAddress();
  }

  try_protocolModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolModule",
      "protocolModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sharesForSale(param0: BigInt): TokenMetadata__sharesForSaleResult {
    let result = super.call(
      "sharesForSale",
      "sharesForSale(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new TokenMetadata__sharesForSaleResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_sharesForSale(
    param0: BigInt,
  ): ethereum.CallResult<TokenMetadata__sharesForSaleResult> {
    let result = super.tryCall(
      "sharesForSale",
      "sharesForSale(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new TokenMetadata__sharesForSaleResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  songSharesId(): BigInt {
    let result = super.call("songSharesId", "songSharesId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_songSharesId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("songSharesId", "songSharesId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stablecoin(): Address {
    let result = super.call("stablecoin", "stablecoin():(address)", []);

    return result[0].toAddress();
  }

  try_stablecoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("stablecoin", "stablecoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  wrappedSongTokenId(): BigInt {
    let result = super.call(
      "wrappedSongTokenId",
      "wrappedSongTokenId():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_wrappedSongTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "wrappedSongTokenId",
      "wrappedSongTokenId():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _stablecoinAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _protocolModuleAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchTransferSharesCall extends ethereum.Call {
  get inputs(): BatchTransferSharesCall__Inputs {
    return new BatchTransferSharesCall__Inputs(this);
  }

  get outputs(): BatchTransferSharesCall__Outputs {
    return new BatchTransferSharesCall__Outputs(this);
  }
}

export class BatchTransferSharesCall__Inputs {
  _call: BatchTransferSharesCall;

  constructor(call: BatchTransferSharesCall) {
    this._call = call;
  }

  get sharesId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get recipients(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class BatchTransferSharesCall__Outputs {
  _call: BatchTransferSharesCall;

  constructor(call: BatchTransferSharesCall) {
    this._call = call;
  }
}

export class CreateFungibleSongSharesCall extends ethereum.Call {
  get inputs(): CreateFungibleSongSharesCall__Inputs {
    return new CreateFungibleSongSharesCall__Inputs(this);
  }

  get outputs(): CreateFungibleSongSharesCall__Outputs {
    return new CreateFungibleSongSharesCall__Outputs(this);
  }
}

export class CreateFungibleSongSharesCall__Inputs {
  _call: CreateFungibleSongSharesCall;

  constructor(call: CreateFungibleSongSharesCall) {
    this._call = call;
  }

  get songId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sharesURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateFungibleSongSharesCall__Outputs {
  _call: CreateFungibleSongSharesCall;

  constructor(call: CreateFungibleSongSharesCall) {
    this._call = call;
  }

  get sharesId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreatesSongTokenCall extends ethereum.Call {
  get inputs(): CreatesSongTokenCall__Inputs {
    return new CreatesSongTokenCall__Inputs(this);
  }

  get outputs(): CreatesSongTokenCall__Outputs {
    return new CreatesSongTokenCall__Outputs(this);
  }
}

export class CreatesSongTokenCall__Inputs {
  _call: CreatesSongTokenCall;

  constructor(call: CreatesSongTokenCall) {
    this._call = call;
  }

  get songURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get participants(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class CreatesSongTokenCall__Outputs {
  _call: CreatesSongTokenCall;

  constructor(call: CreatesSongTokenCall) {
    this._call = call;
  }

  get songId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreatesWrappedSongTokensCall extends ethereum.Call {
  get inputs(): CreatesWrappedSongTokensCall__Inputs {
    return new CreatesWrappedSongTokensCall__Inputs(this);
  }

  get outputs(): CreatesWrappedSongTokensCall__Outputs {
    return new CreatesWrappedSongTokensCall__Outputs(this);
  }
}

export class CreatesWrappedSongTokensCall__Inputs {
  _call: CreatesWrappedSongTokensCall;

  constructor(call: CreatesWrappedSongTokensCall) {
    this._call = call;
  }

  get songURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get sharesAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sharesURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreatesWrappedSongTokensCall__Outputs {
  _call: CreatesWrappedSongTokensCall;

  constructor(call: CreatesWrappedSongTokensCall) {
    this._call = call;
  }

  get songId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get newSongSharesId(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ExecuteConfirmedMetadataUpdateCall extends ethereum.Call {
  get inputs(): ExecuteConfirmedMetadataUpdateCall__Inputs {
    return new ExecuteConfirmedMetadataUpdateCall__Inputs(this);
  }

  get outputs(): ExecuteConfirmedMetadataUpdateCall__Outputs {
    return new ExecuteConfirmedMetadataUpdateCall__Outputs(this);
  }
}

export class ExecuteConfirmedMetadataUpdateCall__Inputs {
  _call: ExecuteConfirmedMetadataUpdateCall;

  constructor(call: ExecuteConfirmedMetadataUpdateCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteConfirmedMetadataUpdateCall__Outputs {
  _call: ExecuteConfirmedMetadataUpdateCall;

  constructor(call: ExecuteConfirmedMetadataUpdateCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class ReceiveERC20Call extends ethereum.Call {
  get inputs(): ReceiveERC20Call__Inputs {
    return new ReceiveERC20Call__Inputs(this);
  }

  get outputs(): ReceiveERC20Call__Outputs {
    return new ReceiveERC20Call__Outputs(this);
  }
}

export class ReceiveERC20Call__Inputs {
  _call: ReceiveERC20Call;

  constructor(call: ReceiveERC20Call) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ReceiveERC20Call__Outputs {
  _call: ReceiveERC20Call;

  constructor(call: ReceiveERC20Call) {
    this._call = call;
  }
}

export class ReceiveEarningsCall extends ethereum.Call {
  get inputs(): ReceiveEarningsCall__Inputs {
    return new ReceiveEarningsCall__Inputs(this);
  }

  get outputs(): ReceiveEarningsCall__Outputs {
    return new ReceiveEarningsCall__Outputs(this);
  }
}

export class ReceiveEarningsCall__Inputs {
  _call: ReceiveEarningsCall;

  constructor(call: ReceiveEarningsCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ReceiveEarningsCall__Outputs {
  _call: ReceiveEarningsCall;

  constructor(call: ReceiveEarningsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RequestUpdateMetadataCall extends ethereum.Call {
  get inputs(): RequestUpdateMetadataCall__Inputs {
    return new RequestUpdateMetadataCall__Inputs(this);
  }

  get outputs(): RequestUpdateMetadataCall__Outputs {
    return new RequestUpdateMetadataCall__Outputs(this);
  }
}

export class RequestUpdateMetadataCall__Inputs {
  _call: RequestUpdateMetadataCall;

  constructor(call: RequestUpdateMetadataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMetadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RequestUpdateMetadataCall__Outputs {
  _call: RequestUpdateMetadataCall;

  constructor(call: RequestUpdateMetadataCall) {
    this._call = call;
  }
}

export class RequestWrappedSongReleaseCall extends ethereum.Call {
  get inputs(): RequestWrappedSongReleaseCall__Inputs {
    return new RequestWrappedSongReleaseCall__Inputs(this);
  }

  get outputs(): RequestWrappedSongReleaseCall__Outputs {
    return new RequestWrappedSongReleaseCall__Outputs(this);
  }
}

export class RequestWrappedSongReleaseCall__Inputs {
  _call: RequestWrappedSongReleaseCall;

  constructor(call: RequestWrappedSongReleaseCall) {
    this._call = call;
  }

  get _distributorWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RequestWrappedSongReleaseCall__Outputs {
  _call: RequestWrappedSongReleaseCall;

  constructor(call: RequestWrappedSongReleaseCall) {
    this._call = call;
  }
}

export class RequestWrappedSongReleaseWithMetadataCall extends ethereum.Call {
  get inputs(): RequestWrappedSongReleaseWithMetadataCall__Inputs {
    return new RequestWrappedSongReleaseWithMetadataCall__Inputs(this);
  }

  get outputs(): RequestWrappedSongReleaseWithMetadataCall__Outputs {
    return new RequestWrappedSongReleaseWithMetadataCall__Outputs(this);
  }
}

export class RequestWrappedSongReleaseWithMetadataCall__Inputs {
  _call: RequestWrappedSongReleaseWithMetadataCall;

  constructor(call: RequestWrappedSongReleaseWithMetadataCall) {
    this._call = call;
  }

  get _distributorWallet(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get songURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class RequestWrappedSongReleaseWithMetadataCall__Outputs {
  _call: RequestWrappedSongReleaseWithMetadataCall;

  constructor(call: RequestWrappedSongReleaseWithMetadataCall) {
    this._call = call;
  }
}

export class SetSharesForSaleCall extends ethereum.Call {
  get inputs(): SetSharesForSaleCall__Inputs {
    return new SetSharesForSaleCall__Inputs(this);
  }

  get outputs(): SetSharesForSaleCall__Outputs {
    return new SetSharesForSaleCall__Outputs(this);
  }
}

export class SetSharesForSaleCall__Inputs {
  _call: SetSharesForSaleCall;

  constructor(call: SetSharesForSaleCall) {
    this._call = call;
  }

  get sharesId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get percentage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get pricePerShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetSharesForSaleCall__Outputs {
  _call: SetSharesForSaleCall;

  constructor(call: SetSharesForSaleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferSongSharesCall extends ethereum.Call {
  get inputs(): TransferSongSharesCall__Inputs {
    return new TransferSongSharesCall__Inputs(this);
  }

  get outputs(): TransferSongSharesCall__Outputs {
    return new TransferSongSharesCall__Outputs(this);
  }
}

export class TransferSongSharesCall__Inputs {
  _call: TransferSongSharesCall;

  constructor(call: TransferSongSharesCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class TransferSongSharesCall__Outputs {
  _call: TransferSongSharesCall;

  constructor(call: TransferSongSharesCall) {
    this._call = call;
  }
}

export class UpdateMetadataCall extends ethereum.Call {
  get inputs(): UpdateMetadataCall__Inputs {
    return new UpdateMetadataCall__Inputs(this);
  }

  get outputs(): UpdateMetadataCall__Outputs {
    return new UpdateMetadataCall__Outputs(this);
  }
}

export class UpdateMetadataCall__Inputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get newMetadata(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateMetadataCall__Outputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }
}
