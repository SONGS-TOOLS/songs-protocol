// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ERC20Received extends ethereum.Event {
  get params(): ERC20Received__Params {
    return new ERC20Received__Params(this);
  }
}

export class ERC20Received__Params {
  _event: ERC20Received;

  constructor(event: ERC20Received) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class FundsWithdrawn extends ethereum.Event {
  get params(): FundsWithdrawn__Params {
    return new FundsWithdrawn__Params(this);
  }
}

export class FundsWithdrawn__Params {
  _event: FundsWithdrawn;

  constructor(event: FundsWithdrawn) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MetadataUpdated extends ethereum.Event {
  get params(): MetadataUpdated__Params {
    return new MetadataUpdated__Params(this);
  }
}

export class MetadataUpdated__Params {
  _event: MetadataUpdated;

  constructor(event: MetadataUpdated) {
    this._event = event;
  }

  get newMetadata(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SharesSaleEnded extends ethereum.Event {
  get params(): SharesSaleEnded__Params {
    return new SharesSaleEnded__Params(this);
  }
}

export class SharesSaleEnded__Params {
  _event: SharesSaleEnded;

  constructor(event: SharesSaleEnded) {
    this._event = event;
  }
}

export class SharesSaleStarted extends ethereum.Event {
  get params(): SharesSaleStarted__Params {
    return new SharesSaleStarted__Params(this);
  }
}

export class SharesSaleStarted__Params {
  _event: SharesSaleStarted;

  constructor(event: SharesSaleStarted) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get maxSharesPerWallet(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get stableCoinAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class SharesSold extends ethereum.Event {
  get params(): SharesSold__Params {
    return new SharesSold__Params(this);
  }
}

export class SharesSold__Params {
  _event: SharesSold;

  constructor(event: SharesSold) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WSTokensCreated extends ethereum.Event {
  get params(): WSTokensCreated__Params {
    return new WSTokensCreated__Params(this);
  }
}

export class WSTokensCreated__Params {
  _event: WSTokensCreated;

  constructor(event: WSTokensCreated) {
    this._event = event;
  }

  get smartAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get minter(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class WSTokenManagement extends ethereum.SmartContract {
  static bind(address: Address): WSTokenManagement {
    return new WSTokenManagement("WSTokenManagement", address);
  }

  SONG_CONCEPT_ID(): BigInt {
    let result = super.call(
      "SONG_CONCEPT_ID",
      "SONG_CONCEPT_ID():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SONG_CONCEPT_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SONG_CONCEPT_ID",
      "SONG_CONCEPT_ID():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SONG_SHARES_ID(): BigInt {
    let result = super.call("SONG_SHARES_ID", "SONG_SHARES_ID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_SONG_SHARES_ID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SONG_SHARES_ID",
      "SONG_SHARES_ID():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>,
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  exists(id: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBoolean();
  }

  try_exists(id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  maxSharesPerWallet(): BigInt {
    let result = super.call(
      "maxSharesPerWallet",
      "maxSharesPerWallet():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_maxSharesPerWallet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxSharesPerWallet",
      "maxSharesPerWallet():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadataModule(): Address {
    let result = super.call("metadataModule", "metadataModule():(address)", []);

    return result[0].toAddress();
  }

  try_metadataModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "metadataModule",
      "metadataModule():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  onERC20Received(token: Address, amount: BigInt): Bytes {
    let result = super.call(
      "onERC20Received",
      "onERC20Received(address,uint256):(bytes4)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBytes();
  }

  try_onERC20Received(
    token: Address,
    amount: BigInt,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC20Received",
      "onERC20Received(address,uint256):(bytes4)",
      [
        ethereum.Value.fromAddress(token),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pricePerShare(): BigInt {
    let result = super.call("pricePerShare", "pricePerShare():(uint256)", []);

    return result[0].toBigInt();
  }

  try_pricePerShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pricePerShare",
      "pricePerShare():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  saleActive(): boolean {
    let result = super.call("saleActive", "saleActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_saleActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("saleActive", "saleActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  sharesForSale(): BigInt {
    let result = super.call("sharesForSale", "sharesForSale():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sharesForSale(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "sharesForSale",
      "sharesForSale():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stableCoin(): Address {
    let result = super.call("stableCoin", "stableCoin():(address)", []);

    return result[0].toAddress();
  }

  try_stableCoin(): ethereum.CallResult<Address> {
    let result = super.tryCall("stableCoin", "stableCoin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalShares(): BigInt {
    let result = super.call("totalShares", "totalShares():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalShares(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalShares", "totalShares():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply1(id: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(id),
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply1(id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(id)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_uri(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _smartAccountAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _minterAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _metadataModuleAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BuySharesCall extends ethereum.Call {
  get inputs(): BuySharesCall__Inputs {
    return new BuySharesCall__Inputs(this);
  }

  get outputs(): BuySharesCall__Outputs {
    return new BuySharesCall__Outputs(this);
  }
}

export class BuySharesCall__Inputs {
  _call: BuySharesCall;

  constructor(call: BuySharesCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BuySharesCall__Outputs {
  _call: BuySharesCall;

  constructor(call: BuySharesCall) {
    this._call = call;
  }
}

export class CreateSongTokensCall extends ethereum.Call {
  get inputs(): CreateSongTokensCall__Inputs {
    return new CreateSongTokensCall__Inputs(this);
  }

  get outputs(): CreateSongTokensCall__Outputs {
    return new CreateSongTokensCall__Outputs(this);
  }
}

export class CreateSongTokensCall__Inputs {
  _call: CreateSongTokensCall;

  constructor(call: CreateSongTokensCall) {
    this._call = call;
  }

  get sharesAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateSongTokensCall__Outputs {
  _call: CreateSongTokensCall;

  constructor(call: CreateSongTokensCall) {
    this._call = call;
  }
}

export class EndSharesSaleCall extends ethereum.Call {
  get inputs(): EndSharesSaleCall__Inputs {
    return new EndSharesSaleCall__Inputs(this);
  }

  get outputs(): EndSharesSaleCall__Outputs {
    return new EndSharesSaleCall__Outputs(this);
  }
}

export class EndSharesSaleCall__Inputs {
  _call: EndSharesSaleCall;

  constructor(call: EndSharesSaleCall) {
    this._call = call;
  }
}

export class EndSharesSaleCall__Outputs {
  _call: EndSharesSaleCall;

  constructor(call: EndSharesSaleCall) {
    this._call = call;
  }
}

export class OnERC20ReceivedCall extends ethereum.Call {
  get inputs(): OnERC20ReceivedCall__Inputs {
    return new OnERC20ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC20ReceivedCall__Outputs {
    return new OnERC20ReceivedCall__Outputs(this);
  }
}

export class OnERC20ReceivedCall__Inputs {
  _call: OnERC20ReceivedCall;

  constructor(call: OnERC20ReceivedCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class OnERC20ReceivedCall__Outputs {
  _call: OnERC20ReceivedCall;

  constructor(call: OnERC20ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetMaxSharesPerWalletCall extends ethereum.Call {
  get inputs(): SetMaxSharesPerWalletCall__Inputs {
    return new SetMaxSharesPerWalletCall__Inputs(this);
  }

  get outputs(): SetMaxSharesPerWalletCall__Outputs {
    return new SetMaxSharesPerWalletCall__Outputs(this);
  }
}

export class SetMaxSharesPerWalletCall__Inputs {
  _call: SetMaxSharesPerWalletCall;

  constructor(call: SetMaxSharesPerWalletCall) {
    this._call = call;
  }

  get maxShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxSharesPerWalletCall__Outputs {
  _call: SetMaxSharesPerWalletCall;

  constructor(call: SetMaxSharesPerWalletCall) {
    this._call = call;
  }
}

export class StartSharesSaleCall extends ethereum.Call {
  get inputs(): StartSharesSaleCall__Inputs {
    return new StartSharesSaleCall__Inputs(this);
  }

  get outputs(): StartSharesSaleCall__Outputs {
    return new StartSharesSaleCall__Outputs(this);
  }
}

export class StartSharesSaleCall__Inputs {
  _call: StartSharesSaleCall;

  constructor(call: StartSharesSaleCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxShares(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _stableCoin(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class StartSharesSaleCall__Outputs {
  _call: StartSharesSaleCall;

  constructor(call: StartSharesSaleCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall extends ethereum.Call {
  get inputs(): WithdrawFundsCall__Inputs {
    return new WithdrawFundsCall__Inputs(this);
  }

  get outputs(): WithdrawFundsCall__Outputs {
    return new WithdrawFundsCall__Outputs(this);
  }
}

export class WithdrawFundsCall__Inputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}

export class WithdrawFundsCall__Outputs {
  _call: WithdrawFundsCall;

  constructor(call: WithdrawFundsCall) {
    this._call = call;
  }
}
