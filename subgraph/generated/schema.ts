// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class WrappedSong extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WrappedSong entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WrappedSong must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("WrappedSong", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WrappedSong | null {
    return changetype<WrappedSong | null>(
      store.get_in_block("WrappedSong", id),
    );
  }

  static load(id: string): WrappedSong | null {
    return changetype<WrappedSong | null>(store.get("WrappedSong", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get distributor(): string | null {
    let value = this.get("distributor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set distributor(value: string | null) {
    if (!value) {
      this.unset("distributor");
    } else {
      this.set("distributor", Value.fromString(<string>value));
    }
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get releasedAt(): BigInt | null {
    let value = this.get("releasedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set releasedAt(value: BigInt | null) {
    if (!value) {
      this.unset("releasedAt");
    } else {
      this.set("releasedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get metadata(): string | null {
    let value = this.get("metadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set metadata(value: string | null) {
    if (!value) {
      this.unset("metadata");
    } else {
      this.set("metadata", Value.fromString(<string>value));
    }
  }

  get newMetadata(): string | null {
    let value = this.get("newMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set newMetadata(value: string | null) {
    if (!value) {
      this.unset("newMetadata");
    } else {
      this.set("newMetadata", Value.fromString(<string>value));
    }
  }
}

export class MetadataUpdateRequest extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save MetadataUpdateRequest entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetadataUpdateRequest must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MetadataUpdateRequest", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MetadataUpdateRequest | null {
    return changetype<MetadataUpdateRequest | null>(
      store.get_in_block("MetadataUpdateRequest", id),
    );
  }

  static load(id: string): MetadataUpdateRequest | null {
    return changetype<MetadataUpdateRequest | null>(
      store.get("MetadataUpdateRequest", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get wrappedSong(): string {
    let value = this.get("wrappedSong");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set wrappedSong(value: string) {
    this.set("wrappedSong", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get newMetadata(): string {
    let value = this.get("newMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set newMetadata(value: string) {
    this.set("newMetadata", Value.fromString(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get confirmedAt(): BigInt | null {
    let value = this.get("confirmedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set confirmedAt(value: BigInt | null) {
    if (!value) {
      this.unset("confirmedAt");
    } else {
      this.set("confirmedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Distributor extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Distributor entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Distributor must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Distributor", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Distributor | null {
    return changetype<Distributor | null>(
      store.get_in_block("Distributor", id),
    );
  }

  static load(id: string): Distributor | null {
    return changetype<Distributor | null>(store.get("Distributor", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get requestedWrappedSongs(): WrappedSongLoader {
    return new WrappedSongLoader(
      "Distributor",
      this.get("id")!.toString(),
      "requestedWrappedSongs",
    );
  }

  get releasedWrappedSongs(): WrappedSongLoader {
    return new WrappedSongLoader(
      "Distributor",
      this.get("id")!.toString(),
      "releasedWrappedSongs",
    );
  }
}

export class WrappedSongLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WrappedSong[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WrappedSong[]>(value);
  }
}
