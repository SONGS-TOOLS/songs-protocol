type ProtocolConfig @entity {
  id: ID!
  reviewPeriodDays: Int!
}

type WrappedSong @entity {
  id: Bytes!
  address: Bytes!
  creator: Bytes!
  status: String!
  stablecoinAddress: Bytes
  createdAt: BigInt!
  metadata: Metadata
  distributor: Distributor
  pendingMetadataUpdate: MetadataUpdateRequest
  releasedAt: BigInt
  releaseRequest: ReleaseRequest
  totalShares: BigInt! # We'll keep this and remove sharesAmount
  shareholders: [ShareHolder!]! @derivedFrom(field: "wrappedSong")
  isAuthentic: Boolean!
}

type TokenMetadata @entity {
  id: ID!
  image: String
  external_url: String
  name: String
  description: String
  attributes: String
  animation_url: String
}

type Metadata @entity {
  id: ID!
  songCID: String
  sharesCID: String
  songURI: TokenMetadata
  sharesURI: TokenMetadata
}

type MetadataUpdateRequest @entity {
  id: Bytes!
  newMetadata: Metadata!
  status: String!
  createdAt: BigInt!
  confirmedAt: BigInt
}

type Distributor @entity {
  id: Bytes!
  address: Bytes!
  wrappedSongs: [WrappedSong!]! @derivedFrom(field: "distributor")
}

type ReleaseRequest @entity {
  id: Bytes!
  status: String!
  createdAt: BigInt!
  reviewStartedAt: BigInt
  confirmedAt: BigInt
}

type Sale @entity {
  id: ID!
  wrappedSong: WrappedSong!
  seller: Bytes!
  buyer: Bytes!
  amount: BigInt!
  pricePerShare: BigInt!
  timestamp: BigInt!
}

type SaleOffer @entity {
  id: ID!
  wrappedSong: WrappedSong!
  seller: Bytes!
  amount: BigInt!
  pricePerShare: BigInt!
  isActive: Boolean!
  createdAt: BigInt!
  updatedAt: BigInt!
}

type ShareHolder @entity {
  id: ID! # Composite key: wrappedSongAddress-holderAddress
  wrappedSong: WrappedSong!
  holder: Bytes!
  shares: BigInt!
  lastUpdated: BigInt!
  totalEarnings: BigInt!
  unclaimedEarnings: BigInt!
  redeemedEarnings: BigInt!
}
